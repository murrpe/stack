
<!DOCTYPE html><html lang="en"><head><link rel="shortcut icon mask-icon" href="https://cdn.auth0.com/website/auth0_favicon.svg" color="#000000"/><link rel="shortcut icon" href="https://cdn.auth0.com/website/new-homepage/dark-favicon.png"/><link rel="stylesheet" href="https://cdn.auth0.com/styleguide/core/3.0.0/core.min.css"/><script class="optanon-category-4" type="text/plain">window.twttr=function(t,e,r){var n,i=t.getElementsByTagName(e)[0],w=window.twttr||{};return t.getElementById(r)?w:((n=t.createElement(e)).id=r,n.src="https://platform.twitter.com/widgets.js",i.parentNode.insertBefore(n,i),w._e=[],w.ready=function(t){w._e.push(t)},w)}(document,"script","twitter-wjs");</script><script class="optanon-category-4" type="text/plain">(function (h, o, t, j, a, r) {h.hj = h.hj || function () { (h.hj.q = h.hj.q || []).push(arguments) }; h._hjSettings = { hjid: 301495, hjsv: 5 }; a = o.getElementsByTagName('head')[0]; r = o.createElement('script'); r.async = 1; r.src = t + h._hjSettings.hjid + j + h._hjSettings.hjsv; a.appendChild(r);}(window, document, '//static.hotjar.com/c/hotjar-', '.js?sv='))</script><script class="optanon-category-4" type="text/plain">
                  window._6si = window._6si || [];
                  window._6si.push(['enableEventTracking', true]);
                  window._6si.push(['setToken', '17aa5119e1d44eeab301f44113230d69']);
                  window._6si.push(['setEndpoint', 'b.6sc.co']);
                  (function() {
                  var gd = document.createElement('script');
                  gd.type = 'text/javascript';
                  gd.async = true;
                  gd.src = '//j.6sc.co/6si.min.js';
                  var s = document.getElementsByTagName('script')[0];
                  s.parentNode.insertBefore(gd, s);
                  })();</script><link rel="preload" href="/blog/api/ab/" as="fetch" crossorigin="use-credentials"/><link rel="canonical" href="https://auth0.com/blog/full-stack-java-with-react-spring-boot-and-jhipster/"/><title>Full Stack Java with React, Spring Boot, and JHipster</title><meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=5.0"/><meta charSet="utf-8"/><meta name="description" content="This tutorial shows you how to create a slick-looking, full-stack, secure application using React, Spring Boot, and JHipster."/><meta property="fb:app_id" content="534074790006350"/><meta property="og:type" content="article"/><meta property="og:title" content="Full Stack Java with React, Spring Boot, and JHipster"/><meta property="og:site_name" content="Auth0 - Blog"/><meta property="og:description" content="This tutorial shows you how to create a slick-looking, full-stack, secure application using React, Spring Boot, and JHipster."/><meta property="og:image" content="https://images.ctfassets.net/23aumh6u8s0i/3l9uOb30e8RqDsuGcE1Uvx/4fe4b3f05831c5502494f1c08987578a/jhispter_hero.jpg"/><meta property="og:url" content="https://auth0.com/blog/full-stack-java-with-react-spring-boot-and-jhipster/"/><meta name="twitter:site" content="@auth0"/><meta name="twitter:creator" content="@auth0"/><meta name="twitter:title" content="Full Stack Java with React, Spring Boot, and JHipster"/><meta name="twitter:description" content="This tutorial shows you how to create a slick-looking, full-stack, secure application using React, Spring Boot, and JHipster."/><meta name="twitter:url" content="https://auth0.com/blog/full-stack-java-with-react-spring-boot-and-jhipster/"/><meta name="twitter:card" content="summary_large_image"/><meta name="twitter:image" content="https://images.ctfassets.net/23aumh6u8s0i/3l9uOb30e8RqDsuGcE1Uvx/4fe4b3f05831c5502494f1c08987578a/jhispter_hero.jpg"/><meta name="twitter:image:height" content="512"/><meta name="twitter:image:width" content="1024"/><meta name="HandheldFriendly" content="True"/><meta name="MobileOptimized" content="320"/><link rel="amphtml" href="https://auth0.com/blog/amp/full-stack-java-with-react-spring-boot-and-jhipster/"/><link rel="manifest" href="https://auth0.com/blog/manifest.json"/><link type="application/atom+xml" rel="alternate" href="https://auth0.com/blog/rss.xml" title="Auth0 Blog"/><link type="application/opensearchdescription+xml" rel="search" href="https://auth0.com/blog/osd.xml"/><meta name="next-head-count" content="32"/><noscript data-n-css=""></noscript><script defer="" nomodule="" src="/blog/_next/static/chunks/polyfills-5cd94c89d3acac5f.js"></script><script src="/blog/_next/static/chunks/webpack-a782c72818c7ffe2.js" defer=""></script><script src="/blog/_next/static/chunks/framework-d3b6a5186d0a11ae.js" defer=""></script><script src="/blog/_next/static/chunks/main-c16094a955a57664.js" defer=""></script><script src="/blog/_next/static/chunks/pages/_app-327acbb6702356fc.js" defer=""></script><script src="/blog/_next/static/chunks/4811-8c18a25694512d39.js" defer=""></script><script src="/blog/_next/static/chunks/86-06286fbbb5daed49.js" defer=""></script><script src="/blog/_next/static/chunks/3715-1fc1ef1ec9644d9e.js" defer=""></script><script src="/blog/_next/static/chunks/150-89677efc7079e4a0.js" defer=""></script><script src="/blog/_next/static/chunks/9764-a8f6c642338eeef4.js" defer=""></script><script src="/blog/_next/static/chunks/pages/blog/%5Bslug%5D-404f2c9c15e091c1.js" defer=""></script><script src="/blog/_next/static/ivq2FU8pGha9ZYzZmTlF3/_buildManifest.js" defer=""></script><script src="/blog/_next/static/ivq2FU8pGha9ZYzZmTlF3/_ssgManifest.js" defer=""></script><script src="/blog/_next/static/ivq2FU8pGha9ZYzZmTlF3/_middlewareManifest.js" defer=""></script><style data-styled="" data-styled-version="5.2.1">html{line-height:1.15;-webkit-text-size-adjust:100%;}/*!sc*/
body{margin:0;}/*!sc*/
main{display:block;}/*!sc*/
h1{font-size:2em;margin:0.67em 0;}/*!sc*/
hr{box-sizing:content-box;height:0;overflow:visible;}/*!sc*/
pre{font-family:monospace,monospace;font-size:1em;}/*!sc*/
a{background-color:transparent;}/*!sc*/
abbr[title]{border-bottom:none;-webkit-text-decoration:underline;text-decoration:underline;-webkit-text-decoration:underline dotted;text-decoration:underline dotted;}/*!sc*/
b,strong{font-weight:bolder;}/*!sc*/
code,kbd,samp{font-family:monospace,monospace;font-size:1em;}/*!sc*/
small{font-size:80%;}/*!sc*/
sub,sup{font-size:75%;line-height:0;position:relative;vertical-align:baseline;}/*!sc*/
sub{bottom:-0.25em;}/*!sc*/
sup{top:-0.5em;}/*!sc*/
img{border-style:none;}/*!sc*/
button,input,optgroup,select,textarea{font-family:inherit;font-size:100%;line-height:1.15;margin:0;}/*!sc*/
button,input{overflow:visible;}/*!sc*/
button,select{text-transform:none;}/*!sc*/
button,[type="button"],[type="reset"],[type="submit"]{-webkit-appearance:button;}/*!sc*/
button::-moz-focus-inner,[type="button"]::-moz-focus-inner,[type="reset"]::-moz-focus-inner,[type="submit"]::-moz-focus-inner{border-style:none;padding:0;}/*!sc*/
button:-moz-focusring,[type="button"]:-moz-focusring,[type="reset"]:-moz-focusring,[type="submit"]:-moz-focusring{outline:1px dotted ButtonText;}/*!sc*/
fieldset{padding:0.35em 0.75em 0.625em;}/*!sc*/
legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal;}/*!sc*/
progress{vertical-align:baseline;}/*!sc*/
textarea{overflow:auto;}/*!sc*/
[type="checkbox"],[type="radio"]{box-sizing:border-box;padding:0;}/*!sc*/
[type="number"]::-webkit-inner-spin-button,[type="number"]::-webkit-outer-spin-button{height:auto;}/*!sc*/
[type="search"]{-webkit-appearance:textfield;outline-offset:-2px;}/*!sc*/
[type="search"]::-webkit-search-decoration{-webkit-appearance:none;}/*!sc*/
::-webkit-file-upload-button{-webkit-appearance:button;font:inherit;}/*!sc*/
details{display:block;}/*!sc*/
summary{display:list-item;}/*!sc*/
template{display:none;}/*!sc*/
[hidden]{display:none;}/*!sc*/
data-styled.g52[id="sc-global-ecVvVt1"]{content:"sc-global-ecVvVt1,"}/*!sc*/
:root{--content-width:120rem;--font-main:'fakt-web',sans-serif;}/*!sc*/
.lightbox{width:100%;height:100%;position:fixed;top:0;left:0;background:rgba(0,0,0,0.85);z-index:9999999;line-height:0;cursor:pointer;}/*!sc*/
.lightbox-image{max-width:100%;cursor:pointer;margin:0 auto;display:block;}/*!sc*/
.lightbox img{position:relative;top:50%;left:50%;-ms-transform:translateX(-50%) translateY(-50%);-webkit-transform:translate(-50%,-50%);-webkit-transform:translate(-50%,-50%);-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%);max-width:100%;max-height:100%;}/*!sc*/
@media screen and (min-width:1200px){.lightbox img{max-width:1200px;}}/*!sc*/
@media screen and (min-height:1200px){.lightbox img{max-height:1200px;}}/*!sc*/
.lightbox span{display:block;position:fixed;bottom:13px;height:1.5em;line-height:1.4em;width:100%;text-align:center;color:white;text-shadow:-1px -1px 0 #000,1px -1px 0 #000,-1px 1px 0 #000,1px 1px 0 #000;font-family:'fakt-web','Helvetica Neue',Hevetica,sans-serif;font-size:18px;}/*!sc*/
.lightbox .videoWrapperContainer{position:relative;top:50%;left:50%;-ms-transform:translateX(-50%) translateY(-50%);-webkit-transform:translate(-50%,-50%);-webkit-transform:translate(-50%,-50%);-ms-transform:translate(-50%,-50%);transform:translate(-50%,-50%);max-width:900px;max-height:100%;}/*!sc*/
.lightbox .videoWrapperContainer .videoWrapper{height:0;line-height:0;margin:0;padding:0;position:relative;padding-bottom:56.333%;background:black;}/*!sc*/
.lightbox .videoWrapper iframe{position:absolute;top:0;left:0;width:100%;height:100%;border:0;display:block;}/*!sc*/
.lightbox #prev,.lightbox #next{height:50px;line-height:36px;display:none;margin-top:-25px;position:fixed;top:50%;padding:0 15px;cursor:pointer;-webkit-text-decoration:none;text-decoration:none;z-index:99;color:white;font-size:60px;font-family:'fakt-web','Helvetica Neue',Hevetica,sans-serif;}/*!sc*/
.lightbox.gallery #prev,.lightbox.gallery #next{display:block;}/*!sc*/
.lightbox #prev{left:0;}/*!sc*/
.lightbox #next{right:0;}/*!sc*/
.lightbox #close{height:50px;width:50px;position:fixed;cursor:pointer;-webkit-text-decoration:none;text-decoration:none;z-index:99;right:0;top:0;}/*!sc*/
.lightbox #close:after,.lightbox #close:before{position:absolute;margin-top:22px;margin-left:14px;content:'';height:3px;background:white;width:23px;-webkit-transform-origin:50% 50%;-ms-transform-origin:50% 50%;transform-origin:50% 50%;-webkit-transform:rotate(-45deg);-ms-transform:rotate(-45deg);transform:rotate(-45deg);}/*!sc*/
.lightbox #close:after{-webkit-transform:rotate(45deg);-ms-transform:rotate(45deg);transform:rotate(45deg);}/*!sc*/
.lightbox,.lightbox *{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;}/*!sc*/
body{box-sizing:border-box;font-family:var(--font-main);font-size:2rem;line-height:3.2rem;}/*!sc*/
html{font-size:10px;}/*!sc*/
data-styled.g53[id="sc-global-jGDHBS1"]{content:"sc-global-jGDHBS1,"}/*!sc*/
html{font-size:62.5%;}/*!sc*/
body.modal-open{overflow:hidden;}/*!sc*/
data-styled.g54[id="sc-global-gUclnr1"]{content:"sc-global-gUclnr1,"}/*!sc*/
.dQGrL{border-bottom:0.1rem solid #cdd2d4;padding-bottom:3.2rem;}/*!sc*/
@media screen and (min-width:900px){.dQGrL{padding-bottom:8rem;}}/*!sc*/
data-styled.g55[id="bie152-0"]{content:"dQGrL,"}/*!sc*/
.fobSsY{display:none;}/*!sc*/
@media screen and (min-width:900px){.fobSsY{display:block;}}/*!sc*/
data-styled.g56[id="bie152-1"]{content:"fobSsY,"}/*!sc*/
.iBZoKk{display:block;}/*!sc*/
@media screen and (min-width:900px){.iBZoKk{display:none;}}/*!sc*/
data-styled.g57[id="bie152-2"]{content:"iBZoKk,"}/*!sc*/
.hzQAvt{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}/*!sc*/
@media screen and (min-width:900px){.hzQAvt{-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;max-width:120rem;margin:0 auto;padding:0 1.6rem;}}/*!sc*/
@media screen and (min-width:1200px){.hzQAvt{padding:0;}}/*!sc*/
data-styled.g58[id="bie152-3"]{content:"hzQAvt,"}/*!sc*/
@media screen and (min-width:900px){.zWfns{-webkit-flex:1;-ms-flex:1;flex:1;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;margin-right:7.8rem;}}/*!sc*/
data-styled.g59[id="bie152-4"]{content:"zWfns,"}/*!sc*/
.gjPoRq{padding:3.2rem 2.4rem 0;}/*!sc*/
@media screen and (min-width:900px){.gjPoRq{padding:0;}}/*!sc*/
data-styled.g60[id="bie152-5"]{content:"gjPoRq,"}/*!sc*/
.kuZGke{font-weight:600;font-size:1rem;-webkit-letter-spacing:0.1rem;-moz-letter-spacing:0.1rem;-ms-letter-spacing:0.1rem;letter-spacing:0.1rem;line-height:1.6rem;text-transform:uppercase;margin-bottom:0;color:#e5af44;}/*!sc*/
@media screen and (min-width:900px){.kuZGke{font-size:1.3rem;-webkit-letter-spacing:0.135rem;-moz-letter-spacing:0.135rem;-ms-letter-spacing:0.135rem;letter-spacing:0.135rem;line-height:2.4rem;}}/*!sc*/
data-styled.g61[id="bie152-6"]{content:"kuZGke,"}/*!sc*/
.dNLsmV{font-weight:400;font-size:2.4rem;color:#000;-webkit-letter-spacing:0.02rem;-moz-letter-spacing:0.02rem;-ms-letter-spacing:0.02rem;letter-spacing:0.02rem;line-height:3.2rem;margin:0;}/*!sc*/
@media screen and (min-width:900px){.dNLsmV{opacity:0.9;font-weight:500;font-size:4rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;line-height:4.8rem;margin-bottom:2.4rem;}}/*!sc*/
@media screen and (min-width:1200px){.dNLsmV{font-weight:600;font-size:6rem;line-height:7.2rem;-webkit-letter-spacing:-0.135rem;-moz-letter-spacing:-0.135rem;-ms-letter-spacing:-0.135rem;letter-spacing:-0.135rem;}}/*!sc*/
data-styled.g62[id="bie152-7"]{content:"dNLsmV,"}/*!sc*/
.BxKyh{font-weight:400;font-size:1.6rem;color:#333;-webkit-letter-spacing:0.01rem;-moz-letter-spacing:0.01rem;-ms-letter-spacing:0.01rem;letter-spacing:0.01rem;text-align:left;line-height:2.4rem;margin-top:2.4rem;margin-bottom:3.2rem;}/*!sc*/
@media screen and (min-width:900px){.BxKyh{font-size:2.4rem;color:#606060;-webkit-letter-spacing:0.02rem;-moz-letter-spacing:0.02rem;-ms-letter-spacing:0.02rem;letter-spacing:0.02rem;line-height:3.2rem;}}/*!sc*/
data-styled.g63[id="bie152-8"]{content:"BxKyh,"}/*!sc*/
.PPWcH{padding:0 2.4rem 0;}/*!sc*/
@media screen and (min-width:900px){.PPWcH{padding:0;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-flow:column nowrap;-ms-flex-flow:column nowrap;flex-flow:column nowrap;gap:2.4rem;}}/*!sc*/
data-styled.g64[id="bie152-9"]{content:"PPWcH,"}/*!sc*/
@media screen and (min-width:900px){.kTTSlD{padding:0;}}/*!sc*/
data-styled.g65[id="bie152-10"]{content:"kTTSlD,"}/*!sc*/
.SbeZk{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;height:5.6rem;margin-bottom:0;color:#242424;}/*!sc*/
data-styled.g66[id="bie152-11"]{content:"SbeZk,"}/*!sc*/
.kAjmGL{height:100%;width:auto;border-radius:50%;margin-right:1.6rem;}/*!sc*/
data-styled.g67[id="bie152-12"]{content:"kAjmGL,"}/*!sc*/
.coofmK{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}/*!sc*/
data-styled.g68[id="bie152-13"]{content:"coofmK,"}/*!sc*/
.czqHud{font-weight:500;margin:0;font-size:1.6rem;color:#242424;-webkit-letter-spacing:-0.02rem;-moz-letter-spacing:-0.02rem;-ms-letter-spacing:-0.02rem;letter-spacing:-0.02rem;text-align:left;line-height:2.4rem;}/*!sc*/
data-styled.g69[id="bie152-14"]{content:"czqHud,"}/*!sc*/
.fCRjyY{font-size:1.6rem;color:#606060;font-weight:300;-webkit-letter-spacing:0.01rem;-moz-letter-spacing:0.01rem;-ms-letter-spacing:0.01rem;letter-spacing:0.01rem;text-align:left;line-height:2.4rem;margin:0;}/*!sc*/
data-styled.g70[id="bie152-15"]{content:"fCRjyY,"}/*!sc*/
.hFSvgw{margin:3.2rem 2.4rem 0;opacity:0.7;font-weight:400;font-size:1.3rem;color:#333;-webkit-letter-spacing:0.008rem;-moz-letter-spacing:0.008rem;-ms-letter-spacing:0.008rem;letter-spacing:0.008rem;text-align:left;line-height:2.4rem;text-transform:capitalize;}/*!sc*/
@media screen and (min-width:900px){.hFSvgw{margin:3.2rem 0 0;font-weight:300;font-size:1.6rem;color:#606060;-webkit-letter-spacing:0.01rem;-moz-letter-spacing:0.01rem;-ms-letter-spacing:0.01rem;letter-spacing:0.01rem;}}/*!sc*/
data-styled.g71[id="bie152-16"]{content:"hFSvgw,"}/*!sc*/
.gZejMy{-webkit-flex:1;-ms-flex:1;flex:1;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;}/*!sc*/
data-styled.g72[id="bie152-17"]{content:"gZejMy,"}/*!sc*/
.jPVgBI{margin:0;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;background-size:cover;background-image:url('https://images.ctfassets.net/23aumh6u8s0i/3l9uOb30e8RqDsuGcE1Uvx/4fe4b3f05831c5502494f1c08987578a/jhispter_hero.jpg');min-width:44.8rem;height:52.8rem;}/*!sc*/
@media screen and (min-width:900px){.jPVgBI{min-width:44.8rem;height:52.8rem;}}/*!sc*/
@media screen and (min-width:1200px){.jPVgBI{width:58.8rem;height:52.8rem;}}/*!sc*/
data-styled.g73[id="bie152-18"]{content:"jPVgBI,"}/*!sc*/
.klcxrk{max-width:100%;width:100%;height:auto;margin:0;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;}/*!sc*/
data-styled.g74[id="bie152-19"]{content:"klcxrk,"}/*!sc*/
.jWmJon{overflow:hidden;padding:6rem 0 0 0;grid-column:3/4;font-weight:300;font-size:1.6rem;-webkit-letter-spacing:0.01rem;-moz-letter-spacing:0.01rem;-ms-letter-spacing:0.01rem;letter-spacing:0.01rem;line-height:2.8rem;}/*!sc*/
.jWmJon .twitter-tweet{margin:auto;}/*!sc*/
.jWmJon p{margin-bottom:3.2rem;}/*!sc*/
.jWmJon strong{font-weight:500;}/*!sc*/
.jWmJon .alert-info{background-color:#daf4fd;color:#097093;}/*!sc*/
.jWmJon .alert-info p{margin-bottom:0;display:inline;}/*!sc*/
.jWmJon .alert-danger{background-color:#ffd8cc;color:#801f00;}/*!sc*/
.jWmJon .alert-success{background-color:#e5f8d1;color:#3f6910;}/*!sc*/
.jWmJon .alert-info svg,.jWmJon .alert-danger svg,.jWmJon .alert-success svg{vertical-align:middle;}/*!sc*/
.jWmJon .alert-info strong,.jWmJon .alert-danger strong,.jWmJon .alert-success strong{vertical-align:middle;}/*!sc*/
.jWmJon .alert-info p,.jWmJon .alert-danger p,.jWmJon .alert-success p{margin-bottom:0;display:inline;}/*!sc*/
.jWmJon .alert{padding:1.5rem;margin-bottom:2.8rem;border-radius:0.3rem;border:0;}/*!sc*/
.jWmJon iframe{margin:0 auto 3.2rem;display:block;}/*!sc*/
.jWmJon video{max-width:100%;}/*!sc*/
@media screen and (min-width:900px){.jWmJon{font-size:2rem;-webkit-letter-spacing:0.02rem;-moz-letter-spacing:0.02rem;-ms-letter-spacing:0.02rem;letter-spacing:0.02rem;line-height:3.2rem;padding:0 5rem 0 0;}}/*!sc*/
.jWmJon h2,.jWmJon h3,.jWmJon h4{margin-bottom:1.5rem;}/*!sc*/
.jWmJon h2{font-weight:600;font-size:2.8rem;-webkit-letter-spacing:-0.02rem;-moz-letter-spacing:-0.02rem;-ms-letter-spacing:-0.02rem;letter-spacing:-0.02rem;line-height:3.2rem;}/*!sc*/
.jWmJon h3{font-size:2.4rem;font-weight:500;opacity:0.7;line-height:1.5;}/*!sc*/
.jWmJon blockquote{margin:3.2rem 0;font-weight:500;font-size:2rem;color:#424242;-webkit-letter-spacing:0.02rem;-moz-letter-spacing:0.02rem;-ms-letter-spacing:0.02rem;letter-spacing:0.02rem;text-align:left;line-height:3.2rem;border-left:0.1rem solid #eb5424;padding:0 0 0 1.5rem;font-style:normal;}/*!sc*/
.jWmJon a{color:#242424;border-bottom:solid 0.1rem #eb5424;font-size:1.6rem;}/*!sc*/
@media screen and (min-width:900px){.jWmJon a{font-size:2rem;}}/*!sc*/
.jWmJon code{font-size:1.5rem;border:0.1rem solid #e8e8e8;border-radius:0.3rem;background-color:#eef;padding:0.1rem 0.5rem;font-family:Consolas,Monaco,'Andale Mono','Ubuntu Mono',monospace;}/*!sc*/
.jWmJon pre{color:#fff;background-color:#011627;overflow-x:auto;padding:0.8rem 1.2rem;border:0.1rem solid #e8e8e8;border-radius:0.3rem;line-height:1.7;word-break:break-all;}/*!sc*/
.jWmJon pre code{padding:0;font-size:1.4rem;background-color:#011627;white-space:pre;color:#fff;overflow-x:auto;border:0;}/*!sc*/
.jWmJon pre code[class*='language-']{color:#ffffff;border:0;background-color:#011627;font-size:1.4rem;text-align:left;white-space:pre;word-spacing:normal;word-break:normal;word-wrap:normal;tab-size:4;-webkit-hyphens:none;-moz-hyphens:none;-ms-hyphens:none;hyphens:none;}/*!sc*/
.jWmJon pre code[class*='language-'] .token::selection{background:rgba(29,59,83,0.99);}/*!sc*/
.jWmJon pre code[class*='language-'] .token.comment,.jWmJon pre code[class*='language-'] .token.prolog,.jWmJon pre code[class*='language-'] .token.cdata{color:rgb(99,119,119);}/*!sc*/
.jWmJon pre code[class*='language-'] .token.punctuation{color:rgb(199,146,234);}/*!sc*/
.jWmJon pre code[class*='language-'] .namespace{color:rgb(178,204,214);}/*!sc*/
.jWmJon pre code[class*='language-'] .token.deleted{color:rgba(239,83,80,0.56);}/*!sc*/
.jWmJon pre code[class*='language-'] .token.symbol,.jWmJon pre code[class*='language-'] .token.property{color:rgb(128,203,196);}/*!sc*/
.jWmJon pre code[class*='language-'] .token.tag,.jWmJon pre code[class*='language-'] .token.operator,.jWmJon pre code[class*='language-'] .token.keyword{color:rgb(127,219,202);}/*!sc*/
.jWmJon pre code[class*='language-'] .token.boolean{color:rgb(255,88,116);}/*!sc*/
.jWmJon pre code[class*='language-'] .token.number{color:rgb(247,140,108);}/*!sc*/
.jWmJon pre code[class*='language-'] .token.constant,.jWmJon pre code[class*='language-'] .token.function,.jWmJon pre code[class*='language-'] .token.builtin,.jWmJon pre code[class*='language-'] .token.char{color:rgb(130,170,255);}/*!sc*/
.jWmJon pre code[class*='language-'] .token.selector,.jWmJon pre code[class*='language-'] .token.doctype{color:rgb(199,146,234);}/*!sc*/
.jWmJon pre code[class*='language-'] .token.attr-name,.jWmJon pre code[class*='language-'] .token.inserted{color:rgb(173,219,103);}/*!sc*/
.jWmJon pre code[class*='language-'] .token.string,.jWmJon pre code[class*='language-'] .token.url,.jWmJon pre code[class*='language-'] .token.entity,.jWmJon pre code[class*='language-'] .language-css .token.string,.jWmJon pre code[class*='language-'] .style .token.string{color:rgb(173,219,103);}/*!sc*/
.jWmJon pre code[class*='language-'] .token.class-name,.jWmJon pre code[class*='language-'] .token.atrule,.jWmJon pre code[class*='language-'] .token.attr-value{color:rgb(255,203,139);}/*!sc*/
.jWmJon pre code[class*='language-'] .token.regex,.jWmJon pre code[class*='language-'] .token.important,.jWmJon pre code[class*='language-'] .token.variable{color:rgb(214,222,235);}/*!sc*/
.jWmJon pre code[class*='language-'] .token.important,.jWmJon pre code[class*='language-'] .token.bold{font-weight:bold;}/*!sc*/
.jWmJon pre code[class*='language-']::selection{text-shadow:none;background:rgba(29,59,83,0.99);}/*!sc*/
.jWmJon details{background:#f5f7f9;padding:3.2rem 3.2rem 0.01rem;margin-bottom:3.2rem;}/*!sc*/
.jWmJon details summary{cursor:pointer;margin-bottom:3.2rem;}/*!sc*/
.jWmJon details summary:focus{outline:none;}/*!sc*/
.jWmJon .try-banner{text-align:center;background:#f5f7f9;padding:7rem 2rem;border-radius:0.3rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;margin:calc(2.4rem / -2) calc(2.4rem / -2);}/*!sc*/
.jWmJon .try-banner > *{margin:calc(2.4rem / 2) calc(2.4rem / 2);}/*!sc*/
.jWmJon .try-banner svg{margin-right:0;}/*!sc*/
.jWmJon .try-banner p{margin-bottom:0;display:inline;line-height:1.6rem;}/*!sc*/
.jWmJon .try-banner .btn{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;position:static;font-weight:500;text-align:center;touch-action:manipulation;cursor:pointer;background-image:none;white-space:nowrap;padding:0.8rem 1.6rem;line-height:2;border-radius:0.3rem;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-transition:background-color 0.2s ease;transition:background-color 0.2s ease;text-transform:uppercase;-webkit-letter-spacing:0.1rem;-moz-letter-spacing:0.1rem;-ms-letter-spacing:0.1rem;letter-spacing:0.1rem;}/*!sc*/
.jWmJon .try-banner .btn-lg{padding:1.6rem 3rem;line-height:1.3333333;border-radius:0.3rem;}/*!sc*/
.jWmJon .try-banner .btn-default{color:#333;background-color:#f1f1f1;}/*!sc*/
.jWmJon .try-banner .btn-default:hover{background-color:#d7d7d7;}/*!sc*/
data-styled.g86[id="nlufiy-0"]{content:"jWmJon,"}/*!sc*/
.dOMuZW{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;list-style:none;padding:0;margin:2rem 0 0;}/*!sc*/
@media screen and (min-width:900px){.dOMuZW{margin:8rem 0 0;}}/*!sc*/
data-styled.g87[id="nlufiy-1"]{content:"dOMuZW,"}/*!sc*/
.fXIXML{margin:0 0.8rem;}/*!sc*/
data-styled.g88[id="nlufiy-2"]{content:"fXIXML,"}/*!sc*/
.jFCgAB{color:#242424;font-size:1.6rem;position:relative;}/*!sc*/
.jFCgAB.jFCgAB{border:0;}/*!sc*/
.jFCgAB::after{position:absolute;top:-4rem;right:-2rem;width:11rem;text-align:center;opacity:0;-webkit-transition:opacity 0.15s ease-in-out;transition:opacity 0.15s ease-in-out;display:block;font-size:1.1rem;padding:0.1rem;background:#f9f9fb;border:0.1rem solid #cdd2d4;border-radius:0.3rem;margin:0;box-shadow:0 0.1rem 1.2rem rgba(0,0,0,0.1);color:#242424;content:'Share on Twitter';}/*!sc*/
.jFCgAB:hover::after{opacity:1;}/*!sc*/
@media screen and (min-width:900px){.jFCgAB{font-size:2rem;}}/*!sc*/
.jRHWVS{color:#242424;font-size:1.6rem;position:relative;}/*!sc*/
.jRHWVS.jRHWVS{border:0;}/*!sc*/
.jRHWVS::after{position:absolute;top:-4rem;right:-2rem;width:11rem;text-align:center;opacity:0;-webkit-transition:opacity 0.15s ease-in-out;transition:opacity 0.15s ease-in-out;display:block;font-size:1.1rem;padding:0.1rem;background:#f9f9fb;border:0.1rem solid #cdd2d4;border-radius:0.3rem;margin:0;box-shadow:0 0.1rem 1.2rem rgba(0,0,0,0.1);color:#242424;content:'Share on LinkedIn';}/*!sc*/
.jRHWVS:hover::after{opacity:1;}/*!sc*/
@media screen and (min-width:900px){.jRHWVS{font-size:2rem;}}/*!sc*/
.dCgmko{color:#242424;font-size:1.6rem;position:relative;}/*!sc*/
.dCgmko.dCgmko{border:0;}/*!sc*/
.dCgmko::after{position:absolute;top:-4rem;right:-2rem;width:11rem;text-align:center;opacity:0;-webkit-transition:opacity 0.15s ease-in-out;transition:opacity 0.15s ease-in-out;display:block;font-size:1.1rem;padding:0.1rem;background:#f9f9fb;border:0.1rem solid #cdd2d4;border-radius:0.3rem;margin:0;box-shadow:0 0.1rem 1.2rem rgba(0,0,0,0.1);color:#242424;content:'Share on Facebook';}/*!sc*/
.dCgmko:hover::after{opacity:1;}/*!sc*/
@media screen and (min-width:900px){.dCgmko{font-size:2rem;}}/*!sc*/
data-styled.g89[id="nlufiy-3"]{content:"jFCgAB,jRHWVS,dCgmko,"}/*!sc*/
.iCQnTv{cursor:pointer;width:auto;height:auto;}/*!sc*/
data-styled.g90[id="sc-127chv3-0"]{content:"iCQnTv,"}/*!sc*/
.bMXvsY{display:none;}/*!sc*/
@media screen and (min-width:900px){.bMXvsY{grid-column:1/2;display:block;}}/*!sc*/
data-styled.g106[id="sc-1y9xkzh-0"]{content:"bMXvsY,"}/*!sc*/
.hTZJuI{position:-webkit-sticky;position:sticky;top:0;padding-top:4rem;}/*!sc*/
data-styled.g107[id="sc-1y9xkzh-1"]{content:"hTZJuI,"}/*!sc*/
.iHLAoI{list-style:none;margin:0;padding:4rem 0 0 0;}/*!sc*/
data-styled.g114[id="sc-1y9xkzh-8"]{content:"iHLAoI,"}/*!sc*/
.kSDgak{border-left:0.1rem solid #d8d8d8;padding:0.6rem 0 0.6rem 1.6rem;margin:1.6rem 0;}/*!sc*/
.kSDgak:hover{border-left:0.1rem solid #242424;}/*!sc*/
.kSDgak:hover span{color:#242424;}/*!sc*/
data-styled.g115[id="sc-1y9xkzh-9"]{content:"kSDgak,"}/*!sc*/
.gUppOI{font-weight:400;font-size:1.3rem;color:#606060;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;line-height:2.4rem;display:block;}/*!sc*/
data-styled.g116[id="sc-1y9xkzh-10"]{content:"gUppOI,"}/*!sc*/
.iKGOGZ{font-weight:600;font-size:1.3rem;color:#606060;-webkit-letter-spacing:0.135rem;-moz-letter-spacing:0.135rem;-ms-letter-spacing:0.135rem;letter-spacing:0.135rem;line-height:2.4rem;text-transform:uppercase;margin:0;display:inline;}/*!sc*/
data-styled.g117[id="sc-1y9xkzh-11"]{content:"iKGOGZ,"}/*!sc*/
.giJJK{margin-left:0.3rem;}/*!sc*/
data-styled.g118[id="sc-1y9xkzh-12"]{content:"giJJK,"}/*!sc*/
.lhZmdi{background:#fff;border-top:solid 0.1rem #cdd2d4;border-bottom:solid 0.1rem #cdd2d4;}/*!sc*/
data-styled.g130[id="afpbj5-0"]{content:"lhZmdi,"}/*!sc*/
.jUlrnr{max-width:122.6rem;margin:0 auto;padding:0 1.6rem;}/*!sc*/
data-styled.g131[id="afpbj5-1"]{content:"jUlrnr,"}/*!sc*/
.kKffdm{display:none;}/*!sc*/
@media screen and (min-width:900px){.kKffdm{margin:8rem 0;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;}}/*!sc*/
data-styled.g132[id="afpbj5-2"]{content:"kKffdm,"}/*!sc*/
.fTfQKv{border-radius:50%;height:8.2rem;width:8.2rem;margin-right:2.3rem;}/*!sc*/
@media screen and (min-width:900px){.fTfQKv{height:16rem;width:16rem;margin-right:4.6rem;}}/*!sc*/
data-styled.g133[id="afpbj5-3"]{content:"fTfQKv,"}/*!sc*/
.gnZRGE{-webkit-flex-basis:100%;-ms-flex-preferred-size:100%;flex-basis:100%;}/*!sc*/
@media screen and (min-width:900px){.gnZRGE{-webkit-flex-basis:50%;-ms-flex-preferred-size:50%;flex-basis:50%;}}/*!sc*/
data-styled.g134[id="afpbj5-4"]{content:"gnZRGE,"}/*!sc*/
.hKELzO{font-weight:400;font-size:2rem;color:#000;-webkit-letter-spacing:0.02rem;-moz-letter-spacing:0.02rem;-ms-letter-spacing:0.02rem;letter-spacing:0.02rem;line-height:3.2rem;margin:0;opacity:1;}/*!sc*/
@media screen and (min-width:900px){.hKELzO{font-size:3.2rem;-webkit-letter-spacing:-0.035rem;-moz-letter-spacing:-0.035rem;-ms-letter-spacing:-0.035rem;letter-spacing:-0.035rem;line-height:4rem;margin-bottom:3.2rem;}}/*!sc*/
data-styled.g135[id="afpbj5-5"]{content:"hKELzO,"}/*!sc*/
.kXpFsO{opacity:0.87;font-weight:600;font-size:1rem;color:#000;-webkit-letter-spacing:0.1rem;-moz-letter-spacing:0.1rem;-ms-letter-spacing:0.1rem;letter-spacing:0.1rem;line-height:1.6rem;text-transform:uppercase;}/*!sc*/
@media screen and (min-width:900px){.kXpFsO{font-size:1.3rem;-webkit-letter-spacing:0.135rem;-moz-letter-spacing:0.135rem;-ms-letter-spacing:0.135rem;letter-spacing:0.135rem;line-height:2.4rem;margin:0;opacity:0.7;}}/*!sc*/
data-styled.g136[id="afpbj5-6"]{content:"kXpFsO,"}/*!sc*/
.beRytG{margin:3.8rem 0 2.3rem;font-weight:300;font-size:1.6rem;-webkit-letter-spacing:0.01rem;-moz-letter-spacing:0.01rem;-ms-letter-spacing:0.01rem;letter-spacing:0.01rem;line-height:2.4rem;}/*!sc*/
@media screen and (min-width:900px){.beRytG{margin:0.8rem 0 1.6rem;}}/*!sc*/
.beRytG a{font-weight:700;color:#242424;}/*!sc*/
.beRytG a:hover{color:#242424;}/*!sc*/
data-styled.g137[id="afpbj5-7"]{content:"beRytG,"}/*!sc*/
.gtgUdW{font-weight:600;font-size:1.3rem;-webkit-letter-spacing:0.135rem;-moz-letter-spacing:0.135rem;-ms-letter-spacing:0.135rem;letter-spacing:0.135rem;color:#0d96c6;cursor:pointer;-webkit-text-decoration:none;text-decoration:none;text-transform:uppercase;}/*!sc*/
.gtgUdW::after{content:'';display:inline-block;width:0;height:0;border:0.55rem solid transparent;border-left:0.55rem solid #0d96c6;margin-bottom:-0.1rem;margin-left:0.55rem;}/*!sc*/
.gtgUdW:hover{color:#053b4e;-webkit-transition:color 0.25s ease-in;transition:color 0.25s ease-in;}/*!sc*/
.gtgUdW:hover::after{border-left:0.55rem solid #053b4e;-webkit-transition:border 0.25s ease-in;transition:border 0.25s ease-in;}/*!sc*/
data-styled.g138[id="afpbj5-8"]{content:"gtgUdW,"}/*!sc*/
.iDyHSd{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;padding:4.8rem 2.4rem;}/*!sc*/
@media screen and (min-width:900px){.iDyHSd{display:none;}}/*!sc*/
data-styled.g139[id="afpbj5-9"]{content:"iDyHSd,"}/*!sc*/
.iKBEzH{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}/*!sc*/
data-styled.g140[id="afpbj5-10"]{content:"iKBEzH,"}/*!sc*/
.IuaRy{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}/*!sc*/
data-styled.g141[id="afpbj5-11"]{content:"IuaRy,"}/*!sc*/
.SwmLi{list-style:none;background:#fff;border:0.1rem solid #e3e5e7;border-radius:0.3rem;-webkit-transition:box-shadow 0.3s;transition:box-shadow 0.3s;padding:0;margin:0.8rem 0;}/*!sc*/
.SwmLi:hover{box-shadow:0 1rem 2rem 0 rgba(0,0,0,0.1);}/*!sc*/
@media screen and (min-width:900px){.SwmLi{margin:0;}}/*!sc*/
data-styled.g144[id="sc-1t3ptg8-2"]{content:"SwmLi,"}/*!sc*/
.hZxZfg,.hZxZfg:hover{color:#242424;}/*!sc*/
data-styled.g146[id="sc-1t3ptg8-4"]{content:"hZxZfg,"}/*!sc*/
.eGlzbU{background-image:url(https://images.ctfassets.net/23aumh6u8s0i/6PHOLRqEbX3rVvwUyufoeK/125762bd3ecc31d99d61b24f2a2987d8/spring-new.png);background-size:cover;background-position:0% 50%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0;height:10.4rem;}/*!sc*/
@media screen and (min-width:900px){.eGlzbU{height:25.6rem;}}/*!sc*/
.gSaCXw{background-image:url(https://images.ctfassets.net/23aumh6u8s0i/1bJhaAmye3tLIINt0wUBZI/241f7a29932541ffd4a38191ba973acf/spring-new);background-size:cover;background-position:0% 50%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0;height:10.4rem;}/*!sc*/
@media screen and (min-width:900px){.gSaCXw{height:25.6rem;}}/*!sc*/
.dtDwd{background-image:url(https://images.ctfassets.net/23aumh6u8s0i/5NmoaVeWVd545OeCADzCfm/c3e106f00a001fa514b34f628b45616a/aws);background-size:cover;background-position:0% 50%;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0;height:10.4rem;}/*!sc*/
@media screen and (min-width:900px){.dtDwd{height:25.6rem;}}/*!sc*/
data-styled.g147[id="sc-1t3ptg8-5"]{content:"eGlzbU,gSaCXw,dtDwd,"}/*!sc*/
.edDGSP{background:#fff;padding:2.4rem;}/*!sc*/
@media screen and (min-width:900px){.edDGSP{padding:4rem;}}/*!sc*/
data-styled.g148[id="sc-1t3ptg8-6"]{content:"edDGSP,"}/*!sc*/
.ikuijq{font-weight:600;font-size:1rem;-webkit-letter-spacing:0.1rem;-moz-letter-spacing:0.1rem;-ms-letter-spacing:0.1rem;letter-spacing:0.1rem;text-transform:uppercase;margin:0;padding:0 0 0.8rem;color:#E5AF44;}/*!sc*/
@media screen and (min-width:900px){.ikuijq{font-size:1.3rem;-webkit-letter-spacing:0.135rem;-moz-letter-spacing:0.135rem;-ms-letter-spacing:0.135rem;letter-spacing:0.135rem;}}/*!sc*/
data-styled.g149[id="sc-1t3ptg8-7"]{content:"ikuijq,"}/*!sc*/
.jVGonE{font-weight:600;font-size:1.6rem;-webkit-letter-spacing:0.035rem;-moz-letter-spacing:0.035rem;-ms-letter-spacing:0.035rem;letter-spacing:0.035rem;line-height:2.4rem;opacity:1;margin:0;}/*!sc*/
@media screen and (min-width:900px){.jVGonE{font-size:2.4rem;-webkit-letter-spacing:-0.02rem;-moz-letter-spacing:-0.02rem;-ms-letter-spacing:-0.02rem;letter-spacing:-0.02rem;line-height:3.2rem;}}/*!sc*/
data-styled.g150[id="sc-1t3ptg8-8"]{content:"jVGonE,"}/*!sc*/
.cUeJxc{background:#f9f9fb;padding:8rem 0 0;}/*!sc*/
data-styled.g167[id="eb4tqf-0"]{content:"cUeJxc,"}/*!sc*/
.eeCWwh{max-width:122.6rem;margin:0 auto;padding:0 1.6rem;}/*!sc*/
data-styled.g168[id="eb4tqf-1"]{content:"eeCWwh,"}/*!sc*/
.eHrQny{opacity:0.7;font-weight:500;font-size:2rem;color:#606060;-webkit-letter-spacing:0.02rem;-moz-letter-spacing:0.02rem;-ms-letter-spacing:0.02rem;letter-spacing:0.02rem;line-height:3.2rem;margin:0 0 2.4rem 0;}/*!sc*/
data-styled.g169[id="eb4tqf-2"]{content:"eHrQny,"}/*!sc*/
.eRFpcL{margin:0;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;padding:0 0 4rem;list-style-type:none;}/*!sc*/
@media screen and (min-width:900px){.eRFpcL{padding:0;display:grid;grid-template-columns:repeat(3,1fr);grid-column-gap:2.4rem;grid-row-gap:2.4rem;}}/*!sc*/
data-styled.g170[id="eb4tqf-3"]{content:"eRFpcL,"}/*!sc*/
.wgbeZ{background:#f9f9fb;padding:4rem 0 4.8rem;}/*!sc*/
@media screen and (min-width:900px){.wgbeZ{padding:4rem 0 8rem;}}/*!sc*/
data-styled.g171[id="fr3dgj-0"]{content:"wgbeZ,"}/*!sc*/
.dGWFvT{max-width:122.6rem;margin:0 auto;padding:0 1.6rem;}/*!sc*/
data-styled.g172[id="fr3dgj-1"]{content:"dGWFvT,"}/*!sc*/
.ejdPpM{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}/*!sc*/
data-styled.g173[id="fr3dgj-2"]{content:"ejdPpM,"}/*!sc*/
.ftCbBx{opacity:0.7;font-weight:500;font-size:2rem;color:#606060;-webkit-letter-spacing:0.02rem;-moz-letter-spacing:0.02rem;-ms-letter-spacing:0.02rem;letter-spacing:0.02rem;line-height:3.2rem;margin:0 0 2.4rem;}/*!sc*/
data-styled.g174[id="fr3dgj-3"]{content:"ftCbBx,"}/*!sc*/
.fJKZGu{cursor:pointer;}/*!sc*/
data-styled.g175[id="fr3dgj-4"]{content:"fJKZGu,"}/*!sc*/
.iGOHXJ{font-weight:300;font-size:1.6rem;color:#242424;-webkit-letter-spacing:0.01rem;-moz-letter-spacing:0.01rem;-ms-letter-spacing:0.01rem;letter-spacing:0.01rem;text-align:left;line-height:2.4rem;margin-bottom:3.2rem;}/*!sc*/
data-styled.g178[id="fr3dgj-7"]{content:"iGOHXJ,"}/*!sc*/
.ddqoCH{color:#242424;border-bottom:0.1rem solid #eb5424;}/*!sc*/
data-styled.g181[id="fr3dgj-10"]{content:"ddqoCH,"}/*!sc*/
.gBETVu{font-weight:500;}/*!sc*/
data-styled.g182[id="fr3dgj-11"]{content:"gBETVu,"}/*!sc*/
.kEXVJZ{background:#fff;padding:0 0 4.8rem;}/*!sc*/
@media screen and (min-width:900px){.kEXVJZ{padding:8rem 0;}}/*!sc*/
data-styled.g184[id="v0njjd-0"]{content:"kEXVJZ,"}/*!sc*/
.dHwRRo{max-width:122.6rem;margin:0 auto;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;padding:0 2.4rem;}/*!sc*/
@media screen and (min-width:900px){.dHwRRo{padding:8rem 0.6rem 0;display:grid;grid-template-columns:32.8rem 5rem 2fr;grid-template-rows:repeat(2,auto);}}/*!sc*/
data-styled.g185[id="v0njjd-1"]{content:"dHwRRo,"}/*!sc*/
.eOJQKq{display:block;}/*!sc*/
data-styled.g186[id="v0njjd-2"]{content:"eOJQKq,"}/*!sc*/
.jHZpuz{position:-webkit-sticky;position:sticky;top:0;background:#242424;z-index:999;}/*!sc*/
.jHZpuz.hide-blog-nav{display:none;}/*!sc*/
@media screen and (min-width:900px){.jHZpuz.hide-blog-nav{display:block;}}/*!sc*/
data-styled.g203[id="qfu855-0"]{content:"jHZpuz,"}/*!sc*/
.cohnnM{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;margin:0 auto;padding:0 1.6rem 0 1rem;height:6rem;}/*!sc*/
@media screen and (min-width:900px){.cohnnM{max-width:144rem;padding:0 1.6rem;margin:0 auto;height:8rem;}}/*!sc*/
data-styled.g204[id="qfu855-1"]{content:"cohnnM,"}/*!sc*/
.hReZRI{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-transform:scale(0.9);-ms-transform:scale(0.9);transform:scale(0.9);}/*!sc*/
@media screen and (min-width:900px){.hReZRI{-webkit-transform:none;-ms-transform:none;transform:none;}}/*!sc*/
data-styled.g205[id="qfu855-2"]{content:"hReZRI,"}/*!sc*/
.BbhZl{color:#242424;-webkit-align-self:center;-ms-flex-item-align:center;align-self:center;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}/*!sc*/
.BbhZl:hover{opacity:0.8;}/*!sc*/
data-styled.g206[id="qfu855-3"]{content:"BbhZl,"}/*!sc*/
.fyvoSS{display:none;list-style:none;padding:0;margin:0;}/*!sc*/
@media screen and (min-width:1200px){.fyvoSS{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:space-evenly;-webkit-justify-content:space-evenly;-ms-flex-pack:space-evenly;justify-content:space-evenly;}}/*!sc*/
data-styled.g207[id="qfu855-4"]{content:"fyvoSS,"}/*!sc*/
.dQKcqD{padding:0 1rem;}/*!sc*/
@media screen and (min-width:900px){.dQKcqD{padding:0 1.6rem;}}/*!sc*/
data-styled.g208[id="qfu855-5"]{content:"dQKcqD,"}/*!sc*/
.fQFuzE{font-size:1.5rem;color:#cdd2d4;line-height:2.4rem;font-weight:400;-webkit-letter-spacing:0.02rem;-moz-letter-spacing:0.02rem;-ms-letter-spacing:0.02rem;letter-spacing:0.02rem;}/*!sc*/
.fQFuzE:hover{color:white;}/*!sc*/
data-styled.g209[id="qfu855-6"]{content:"fQFuzE,"}/*!sc*/
.hVUOsD{display:none;}/*!sc*/
@media screen and (min-width:900px){.hVUOsD{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:space-evenly;-webkit-justify-content:space-evenly;-ms-flex-pack:space-evenly;justify-content:space-evenly;}}/*!sc*/
data-styled.g210[id="qfu855-7"]{content:"hVUOsD,"}/*!sc*/
.bMXPDE{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}/*!sc*/
@media screen and (min-width:900px){.bMXPDE{display:none;}}/*!sc*/
data-styled.g211[id="qfu855-8"]{content:"bMXPDE,"}/*!sc*/
.fzCeRu{font-weight:600;font-size:1.4rem;color:#fff;-webkit-letter-spacing:0.1rem;-moz-letter-spacing:0.1rem;-ms-letter-spacing:0.1rem;letter-spacing:0.1rem;text-transform:uppercase;background:transparent;border:0.1rem solid #cdd2d4;padding:1.2rem;line-height:3.2rem;border-radius:0.3rem;}/*!sc*/
.fzCeRu:hover{border:0.1rem solid #fff;color:#fff;}/*!sc*/
@media screen and (min-width:900px){.fzCeRu{font-weight:400;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;color:#CDD2D4;text-transform:none;padding:0 1.6rem;}}/*!sc*/
data-styled.g212[id="qfu855-9"]{content:"fzCeRu,"}/*!sc*/
.kjKZJW{margin-bottom:0.8rem;font-weight:600;font-size:1.4rem;color:#fff;-webkit-letter-spacing:0.1rem;-moz-letter-spacing:0.1rem;-ms-letter-spacing:0.1rem;letter-spacing:0.1rem;text-transform:uppercase;background-color:#eb5424;border:0.1rem solid #eb5424;padding:1.2rem;line-height:3.2rem;border-radius:0.3rem;}/*!sc*/
.kjKZJW:hover{cursor:pointer;color:#fff;background-color:#d94514;}/*!sc*/
@media screen and (min-width:900px){.kjKZJW{margin-left:1.6rem;margin-bottom:0;font-size:1.1rem;-webkit-letter-spacing:0.092rem;-moz-letter-spacing:0.092rem;-ms-letter-spacing:0.092rem;letter-spacing:0.092rem;padding:0 1.6rem;}}/*!sc*/
data-styled.g213[id="qfu855-10"]{content:"kjKZJW,"}/*!sc*/
.bUpImh{display:none;width:2.6rem;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;cursor:pointer;opacity:0.8;margin-left:2.4rem;}/*!sc*/
.bUpImh:hover{opacity:1;}/*!sc*/
@media screen and (min-width:900px){.bUpImh{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}}/*!sc*/
data-styled.g214[id="qfu855-11"]{content:"bUpImh,"}/*!sc*/
.fQdvpT{width:2.6rem;cursor:pointer;opacity:0.8;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}/*!sc*/
@media screen and (min-width:900px){.fQdvpT{display:none;}}/*!sc*/
data-styled.g215[id="qfu855-12"]{content:"fQdvpT,"}/*!sc*/
.ggbIzm{display:none;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}/*!sc*/
data-styled.g216[id="qfu855-13"]{content:"ggbIzm,"}/*!sc*/
.cOJQfD{margin-left:2rem;cursor:pointer;opacity:0.8;}/*!sc*/
data-styled.g217[id="qfu855-14"]{content:"cOJQfD,"}/*!sc*/
.huIner{visibility:hidden;z-index:1;position:absolute;background:#242424;width:100%;height:100%;display:block;overflow-y:scroll;overflow-x:hidden;}/*!sc*/
data-styled.g218[id="qfu855-15"]{content:"huIner,"}/*!sc*/
.dPBwKt{list-style:none;padding:0;margin:3rem 2.4rem;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}/*!sc*/
data-styled.g219[id="qfu855-16"]{content:"dPBwKt,"}/*!sc*/
.hdfvqY{padding:2.5rem 0 0;}/*!sc*/
data-styled.g220[id="qfu855-17"]{content:"hdfvqY,"}/*!sc*/
.gINsin{color:#fff;font-weight:500;font-size:2.5rem;text-align:center;line-height:3.75rem;}/*!sc*/
.gINsin:hover{color:#fff;}/*!sc*/
data-styled.g221[id="qfu855-18"]{content:"gINsin,"}/*!sc*/
.jWrqOS{padding:6rem 0 0;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;width:100%;}/*!sc*/
data-styled.g222[id="qfu855-19"]{content:"jWrqOS,"}/*!sc*/
.qqefI{margin-bottom:0.8rem;font-weight:600;font-size:1.4rem;color:#fff;-webkit-letter-spacing:0.1rem;-moz-letter-spacing:0.1rem;-ms-letter-spacing:0.1rem;letter-spacing:0.1rem;text-transform:uppercase;background:#eb5424;border:0.1rem solid #eb5424;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;line-height:3.2rem;padding:1.2rem 0;border-radius:0.3rem;}/*!sc*/
.qqefI:hover{color:#fff;background:#d94514;border:0.1rem solid #d94514;cursor:pointer;}/*!sc*/
data-styled.g223[id="qfu855-20"]{content:"qqefI,"}/*!sc*/
.hkSJcp{font-weight:600;font-size:1.4rem;color:#fff;-webkit-letter-spacing:0.1rem;-moz-letter-spacing:0.1rem;-ms-letter-spacing:0.1rem;letter-spacing:0.1rem;text-transform:uppercase;background:transparent;border:0.1rem solid #cdd2d4;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-box-pack:center;-webkit-justify-content:center;-ms-flex-pack:center;justify-content:center;line-height:3.2rem;padding:1.2rem 0;border-radius:0.3rem;}/*!sc*/
.hkSJcp:hover{border-color:#fff;color:#fff;}/*!sc*/
data-styled.g224[id="qfu855-21"]{content:"hkSJcp,"}/*!sc*/
.eJSREB{background-image:url('https://cdn.auth0.com/website/marketplace-header-bg.png');background-size:cover;background-position:bottom;font-weight:800;text-align:center;top:0;height:5rem;max-height:5rem;color:#fff;font-size:1.7rem;position:relative;overflow:hidden;padding-top:0.8rem;display:none;}/*!sc*/
@media screen and (min-width:900px){.eJSREB{display:block;}}/*!sc*/
data-styled.g225[id="lwvj4y-0"]{content:"eJSREB,"}/*!sc*/
.gIKTKh{float:right;padding:0.4rem 2rem 0 0;height:3rem;width:3.8rem;}/*!sc*/
.gIKTKh:hover{cursor:pointer;}/*!sc*/
data-styled.g228[id="lwvj4y-3"]{content:"gIKTKh,"}/*!sc*/
.fpXLVz{position:fixed;top:0;left:0;background:#eb5424;height:0.5rem;-webkit-transition:all 0.2s ease-in-out;transition:all 0.2s ease-in-out;z-index:99999;}/*!sc*/
data-styled.g237[id="u5ztjm-0"]{content:"fpXLVz,"}/*!sc*/
.kFxyKJ{background-color:#fff;}/*!sc*/
data-styled.g238[id="sc-1cjm8t9-0"]{content:"kFxyKJ,"}/*!sc*/
.hCUaZa{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;border-bottom:solid 0.1rem #cdd2d4;border-top:solid 0.1rem #cdd2d4;padding:4rem 2.5rem;}/*!sc*/
@media screen and (min-width:900px){.hCUaZa{-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;padding:8rem 0;-webkit-box-pack:space-around;-webkit-justify-content:space-around;-ms-flex-pack:space-around;justify-content:space-around;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}}/*!sc*/
data-styled.g239[id="sc-1cjm8t9-1"]{content:"hCUaZa,"}/*!sc*/
.jqjLnD{font-weight:300;font-size:2.4rem;color:#242424;-webkit-letter-spacing:0.02rem;-moz-letter-spacing:0.02rem;-ms-letter-spacing:0.02rem;letter-spacing:0.02rem;line-height:3.6rem;margin-top:0;}/*!sc*/
@media screen and (min-width:900px){.jqjLnD{font-size:3.2rem;-webkit-letter-spacing:0.015rem;-moz-letter-spacing:0.015rem;-ms-letter-spacing:0.015rem;letter-spacing:0.015rem;line-height:4rem;font-weight:400;}}/*!sc*/
data-styled.g241[id="sc-1cjm8t9-3"]{content:"jqjLnD,"}/*!sc*/
.dyFOzi{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;}/*!sc*/
@media screen and (min-width:900px){.dyFOzi{-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;}}/*!sc*/
data-styled.g242[id="sc-1cjm8t9-4"]{content:"dyFOzi,"}/*!sc*/
.eYcLwW{padding:0.6rem 2.4rem;text-transform:uppercase;font-weight:600;font-size:1.3rem;-webkit-letter-spacing:0.135rem;-moz-letter-spacing:0.135rem;-ms-letter-spacing:0.135rem;letter-spacing:0.135rem;cursor:pointer;border-radius:0.3rem;text-align:center;margin-bottom:0.8rem;line-height:3.2rem;}/*!sc*/
@media screen and (min-width:900px){.eYcLwW{-webkit-align-self:center;-ms-flex-item-align:center;align-self:center;margin-bottom:0;}}/*!sc*/
data-styled.g243[id="sc-1cjm8t9-5"]{content:"eYcLwW,"}/*!sc*/
.jLIrRp{padding:0.6rem 2.4rem;text-transform:uppercase;font-weight:600;font-size:1.3rem;-webkit-letter-spacing:0.135rem;-moz-letter-spacing:0.135rem;-ms-letter-spacing:0.135rem;letter-spacing:0.135rem;cursor:pointer;border-radius:0.3rem;text-align:center;margin-bottom:0.8rem;line-height:3.2rem;color:#ffffff;background:#eb5424;border:0.1rem solid #eb5424;}/*!sc*/
@media screen and (min-width:900px){.jLIrRp{-webkit-align-self:center;-ms-flex-item-align:center;align-self:center;margin-bottom:0;}}/*!sc*/
.jLIrRp:hover{background:#d94514;color:#ffffff;border:0.1rem solid #d94514;}/*!sc*/
data-styled.g244[id="sc-1cjm8t9-6"]{content:"jLIrRp,"}/*!sc*/
.iMBUpK{color:#242424;background:transparent;border:0.1rem solid #606060;}/*!sc*/
.iMBUpK:hover{border:0.1rem solid #242424;}/*!sc*/
@media screen and (min-width:900px){.iMBUpK{margin-left:2.4rem;}}/*!sc*/
data-styled.g245[id="sc-1cjm8t9-7"]{content:"iMBUpK,"}/*!sc*/
.cKkxOM{background:#f9f9fb;}/*!sc*/
data-styled.g246[id="se2h2f-0"]{content:"cKkxOM,"}/*!sc*/
.dVGqDZ{padding:4rem 0 0;}/*!sc*/
data-styled.g247[id="se2h2f-1"]{content:"dVGqDZ,"}/*!sc*/
.eRDypO{max-width:122.6rem;margin:0 auto;padding:0 1.6rem;}/*!sc*/
data-styled.g248[id="se2h2f-2"]{content:"eRDypO,"}/*!sc*/
.daVBxX{display:grid;grid-template-columns:repeat(2,1fr);grid-template-rows:auto;grid-row-gap:4rem;list-style:none;padding:0;margin:0;justify-items:flex-start;}/*!sc*/
@media screen and (min-width:900px){.daVBxX{grid-template-columns:repeat(4,1fr);}}/*!sc*/
data-styled.g249[id="se2h2f-3"]{content:"daVBxX,"}/*!sc*/
@media screen and (min-width:900px){.frYIIS:first-child{grid-column:1/2;}.frYIIS:nth-child(2){grid-column:2/3;}.frYIIS:nth-child(3){grid-column:3/4;}.frYIIS:nth-child(4){grid-column:4/5;}}/*!sc*/
data-styled.g250[id="se2h2f-4"]{content:"frYIIS,"}/*!sc*/
.hYwhOd{font-weight:600;font-size:1.1rem;color:#a5a8a8;opacity:0.7;-webkit-letter-spacing:0.092rem;-moz-letter-spacing:0.092rem;-ms-letter-spacing:0.092rem;letter-spacing:0.092rem;line-height:1.6rem;text-transform:uppercase;margin:0 0 1.5rem 0;}/*!sc*/
data-styled.g251[id="se2h2f-5"]{content:"hYwhOd,"}/*!sc*/
.pJMTk{font-weight:300;font-size:1.3rem;color:#242424;-webkit-letter-spacing:0.008rem;-moz-letter-spacing:0.008rem;-ms-letter-spacing:0.008rem;letter-spacing:0.008rem;text-align:left;line-height:2.4rem;margin:0;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;gap:0.4rem;}/*!sc*/
@media screen and (min-width:900px){.pJMTk{font-weight:400;font-size:1.5rem;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;line-height:3.2rem;gap:0.8rem;}}/*!sc*/
data-styled.g252[id="se2h2f-6"]{content:"pJMTk,"}/*!sc*/
.kfPipf{color:#242424;}/*!sc*/
.kfPipf:hover{color:#242424;opacity:0.7;}/*!sc*/
data-styled.g253[id="se2h2f-7"]{content:"kfPipf,"}/*!sc*/
.gplNEi{border-bottom:0.1rem solid #cdd2d4;margin-top:3.2rem;width:100vw;margin-left:-1.6rem;}/*!sc*/
@media screen and (min-width:900px){.gplNEi{display:none;}}/*!sc*/
data-styled.g254[id="se2h2f-8"]{content:"gplNEi,"}/*!sc*/
.gBMQRB{margin:3.2rem 0 0;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;-webkit-flex-direction:column;-ms-flex-direction:column;flex-direction:column;-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;}/*!sc*/
@media screen and (min-width:900px){.gBMQRB{margin:8rem 0 0;-webkit-flex-direction:row;-ms-flex-direction:row;flex-direction:row;-webkit-align-items:baseline;-webkit-box-align:baseline;-ms-flex-align:baseline;align-items:baseline;-webkit-box-pack:justify;-webkit-justify-content:space-between;-ms-flex-pack:justify;justify-content:space-between;}}/*!sc*/
data-styled.g255[id="se2h2f-9"]{content:"gBMQRB,"}/*!sc*/
.dHEfNl{display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;margin:0 0 1.6rem;list-style:none;padding:0;}/*!sc*/
data-styled.g256[id="se2h2f-10"]{content:"dHEfNl,"}/*!sc*/
.gKhDpQ{padding:0 1.6rem 0;opacity:0.4;}/*!sc*/
.gKhDpQ:first-child{padding:0 1.6rem 0 0;}/*!sc*/
.gKhDpQ:hover{opacity:0.7;}/*!sc*/
data-styled.g257[id="se2h2f-11"]{content:"gKhDpQ,"}/*!sc*/
.gXAHYn{color:#242424;}/*!sc*/
.gXAHYn:hover{color:#242424;}/*!sc*/
data-styled.g258[id="se2h2f-12"]{content:"gXAHYn,"}/*!sc*/
.eYYtIj{font-weight:400;font-size:1.5rem;color:#606060;-webkit-letter-spacing:0;-moz-letter-spacing:0;-ms-letter-spacing:0;letter-spacing:0;line-height:2.4rem;text-align:center;margin-bottom:3.2rem;}/*!sc*/
@media screen and (min-width:900px){.eYYtIj{font-size:1.3rem;text-align:right;}}/*!sc*/
data-styled.g259[id="se2h2f-13"]{content:"eYYtIj,"}/*!sc*/
.kUlUxE{display:none;margin-left:0.8rem;}/*!sc*/
@media screen and (min-width:900px){.kUlUxE{display:inline-block;}}/*!sc*/
data-styled.g260[id="se2h2f-14"]{content:"kUlUxE,"}/*!sc*/
.VdjZw{width:1.052rem;height:2rem;}/*!sc*/
data-styled.g261[id="se2h2f-15"]{content:"VdjZw,"}/*!sc*/
.biwoHT{width:1.958rem;height:2rem;}/*!sc*/
data-styled.g262[id="se2h2f-16"]{content:"biwoHT,"}/*!sc*/
.ekZMky{width:1.77rem;height:2rem;}/*!sc*/
data-styled.g263[id="se2h2f-17"]{content:"ekZMky,"}/*!sc*/
.bLnTdJ{width:1.77rem;height:2rem;}/*!sc*/
data-styled.g264[id="se2h2f-18"]{content:"bLnTdJ,"}/*!sc*/
.eNRqGo{width:2.02rem;height:2rem;}/*!sc*/
data-styled.g265[id="se2h2f-19"]{content:"eNRqGo,"}/*!sc*/
.gtkBJS{height:1.4rem;}/*!sc*/
@media screen and (min-width:900px){.gtkBJS{height:1.8rem;}}/*!sc*/
data-styled.g266[id="se2h2f-20"]{content:"gtkBJS,"}/*!sc*/
</style></head><body itemscope="" itemType="http://schema.org/WebPage"><div id="__next"><script src="https://cdn.cookielaw.org/scripttemplates/otSDKStub.js" type="text/javascript" charSet="UTF-8" data-domain-script="96e22fd8-d619-4cdd-a3c6-d51529d21faf" id="consent-script"></script><script>
                function OptanonWrapper() {
                  const status = document.getElementById("onetrust-accept-btn-handler") ? 'waitingForConsent' : 'expressedConsent';
                  window.top.postMessage(status, '*');
                }
              </script><script>window.datafile=undefined</script><div style="width:0%;opacity:1" class="u5ztjm-0 fpXLVz"></div><nav id="blog-header" class="qfu855-0 jHZpuz"><div class="qfu855-1 cohnnM"><div class="qfu855-2 hReZRI"><a href="/blog/" class="qfu855-3 BbhZl"><svg width="158" height="43" fill="none" xmlns="http://www.w3.org/2000/svg"><g fill="#fff"><path d="M21.952 2.667H12.53l2.91 9.066h9.422l-7.62 5.402 2.91 9.13c4.899-3.581 6.511-8.983 4.71-14.532l-2.91-9.066zM.218 11.733H9.62l2.91-9.066H3.129l-2.91 9.066c-1.801 5.549-.21 10.951 4.69 14.531l2.91-9.129-7.6-5.402zm4.69 14.531l7.622 5.381 7.621-5.38-7.621-5.486-7.621 5.485zm71.064-14.74c-2.24 0-3.664 1.005-4.334 2.638h-.167V6.708h-3.33v19.514h3.413v-8.48c0-2.093 1.299-3.308 3.141-3.308 1.843 0 2.848 1.152 2.848 3.1v8.688h3.413v-9.254c0-3.497-1.99-5.444-4.984-5.444zM90.19 6.666c-4.627 0-7.412 3.622-7.412 9.904s2.764 9.987 7.412 9.987c4.649 0 7.413-3.664 7.413-9.987s-2.785-9.904-7.413-9.904zm-3.894 9.904c.02-4.586 1.507-6.993 3.894-6.993 1.634 0 2.848 1.11 3.455 3.287l-7.286 5.276a17.912 17.912 0 01-.063-1.57zm3.894 7.035c-1.675 0-2.931-1.193-3.517-3.497L94 14.77c.06.598.089 1.2.084 1.801 0 4.627-1.487 7.035-3.895 7.035zM52.752 20.13c0 2.199-1.57 3.288-3.078 3.288-1.507 0-2.743-1.152-2.743-2.995v-8.71H43.52v9.234c0 3.497 1.988 5.465 4.836 5.465 2.157 0 3.685-1.152 4.355-2.764h.147v2.575h3.308v-14.51h-3.413v8.418zm-16.96-8.626c-3.057 0-5.38 1.361-6.135 4l3.183.46c.335-1.005 1.298-1.843 2.973-1.843 1.675 0 2.45.796 2.45 2.24v.043c0 .983-1.026 1.026-3.58 1.298-2.555.272-5.507 1.151-5.507 4.417 0 2.848 2.094 4.356 4.857 4.356 2.262 0 3.623-1.068 4.251-2.283h.105v1.99h3.287v-9.695c0-3.832-3.12-4.983-5.884-4.983zm2.492 9.485c0 1.612-1.32 2.973-3.371 2.973-1.424 0-2.45-.649-2.45-1.905s1.152-1.864 2.68-2.073c.9-.126 2.68-.356 3.141-.712v1.717zM63.472 8.09H60.06v3.643h-2.072v2.701h2.072v8.04c-.02 2.723 1.948 4.062 4.523 3.979a6.407 6.407 0 001.738-.251V23.5c-.251.041-.858.104-1.298.125-.859.021-1.55-.314-1.55-1.675v-7.517h2.848v-2.7h-2.847V8.09zM67.488 40.876c1.067 0 1.852-.913 1.852-2.391 0-1.487-.785-2.39-1.852-2.39-.794 0-1.232.437-1.442.811v-2.545h-.858v6.387h.83v-.684c.22.374.676.812 1.47.812zm-.246-.73c-.722 0-1.242-.557-1.242-1.67s.52-1.652 1.242-1.652c.702 0 1.213.42 1.213 1.652 0 1.223-.511 1.67-1.213 1.67zm6.031-3.924l-.775 2.345c-.21.611-.265.785-.347 1.031-.082-.219-.164-.42-.465-1.122l-.931-2.254h-.958l1.998 4.471-.228.648c-.128.347-.31.42-.62.42h-.913v.767h.94c.794 0 1.132-.283 1.423-1.141l1.78-5.165h-.904zm6.964 4.654c1.834 0 3.184-1.333 3.184-3.322 0-1.98-1.35-3.321-3.184-3.321-1.835 0-3.212 1.341-3.212 3.321 0 1.99 1.368 3.322 3.212 3.322zm-.01-.83c-1.396 0-2.226-1.068-2.226-2.492 0-1.423.83-2.49 2.226-2.49 1.397 0 2.227 1.067 2.227 2.49 0 1.424-.83 2.492-2.227 2.492zm7.754.702h1.105l-2.172-2.646 2.007-1.88H87.8l-2.309 2.254V34.36h-.858v6.388h.858v-1.314l.822-.766 1.67 2.08zm3.434 0h1.113v-.739h-.949c-.31 0-.447-.137-.447-.447v-2.628h1.223v-.712h-1.223v-1.414h-.858v1.414h-1.03v.712h1.03v2.7c0 .749.393 1.114 1.141 1.114zm3.252.128c.721 0 1.159-.32 1.478-.812.055.383.183.684.84.684h.657v-.73h-.465c-.21 0-.265-.055-.265-.264v-2.072c0-.976-.584-1.588-1.807-1.588-1.195 0-1.843.648-1.99 1.269l.822.264c.119-.346.374-.812 1.168-.812.666 0 .949.32.949.84v.136c-1.469.12-2.847.539-2.847 1.789 0 .803.575 1.296 1.46 1.296zm.228-.703c-.538 0-.803-.255-.803-.666 0-.72.904-.985 1.962-1.095v.465c0 .904-.584 1.296-1.159 1.296zM112.357 26.293V7.02h1.685v7.576h.15a6.44 6.44 0 01.81-1.336 4.33 4.33 0 011.402-1.149c.584-.313 1.317-.47 2.202-.47 1.186 0 2.227.314 3.125.94.897.622 1.596 1.494 2.098 2.617.502 1.117.753 2.419.753 3.905 0 1.493-.251 2.801-.753 3.925-.496 1.123-1.192 1.998-2.09 2.625-.89.628-1.925.941-3.105.941-.878 0-1.612-.157-2.202-.47-.583-.314-1.054-.7-1.411-1.158a6.666 6.666 0 01-.829-1.355h-.206v2.682h-1.629zm1.657-7.218c0 1.167.172 2.202.517 3.106.352.897.853 1.602 1.506 2.117.659.508 1.456.762 2.39.762.96 0 1.772-.263 2.437-.79.666-.534 1.17-1.252 1.516-2.155.345-.904.517-1.917.517-3.04 0-1.11-.172-2.111-.517-3.002-.339-.89-.841-1.596-1.506-2.117-.665-.527-1.48-.79-2.447-.79-.94 0-1.74.253-2.4.762-.652.501-1.15 1.198-1.496 2.089-.345.884-.517 1.904-.517 3.058zM128.697 7.02v19.273h-1.675V7.02h1.675zm8.812 19.574c-1.249 0-2.353-.317-3.313-.95-.953-.634-1.7-1.51-2.24-2.626-.539-1.123-.809-2.419-.809-3.886 0-1.481.27-2.783.81-3.906.539-1.129 1.286-2.007 2.24-2.635.959-.633 2.063-.95 3.312-.95 1.248 0 2.35.317 3.303.95.953.634 1.7 1.512 2.24 2.635.545 1.123.818 2.425.818 3.906 0 1.467-.27 2.763-.81 3.886-.539 1.117-1.288 1.992-2.248 2.626-.954.633-2.055.95-3.303.95zm0-1.534c1.004 0 1.854-.27 2.55-.809.696-.54 1.223-1.258 1.58-2.155.365-.897.547-1.885.547-2.964 0-1.08-.182-2.07-.546-2.974-.358-.904-.885-1.628-1.581-2.174s-1.547-.819-2.55-.819c-.998 0-1.848.273-2.55.819-.697.546-1.227 1.27-1.591 2.174-.357.903-.536 1.895-.536 2.974 0 1.079.179 2.067.536 2.964.364.897.894 1.615 1.59 2.155.697.54 1.547.81 2.55.81zm14.314 6.954c-.985 0-1.848-.128-2.588-.385-.74-.251-1.365-.596-1.873-1.036a4.962 4.962 0 01-1.185-1.477l1.374-.903c.207.364.483.721.828 1.072.351.352.806.643 1.364.876.565.232 1.258.348 2.08.348 1.28 0 2.312-.32 3.096-.96.79-.64 1.185-1.634 1.185-2.983V23.31h-.15c-.195.439-.474.878-.838 1.317-.364.433-.84.794-1.43 1.082-.583.289-1.308.433-2.174.433-1.154 0-2.18-.285-3.077-.856-.89-.57-1.594-1.386-2.108-2.447-.508-1.066-.762-2.337-.762-3.811 0-1.462.248-2.748.743-3.858.502-1.11 1.202-1.976 2.099-2.598.897-.62 1.941-.931 3.133-.931.885 0 1.619.157 2.203.47.583.308 1.05.69 1.402 1.149.357.458.636.903.837 1.336h.17v-2.757h1.637v14.83c0 1.224-.26 2.23-.781 3.021a4.63 4.63 0 01-2.127 1.75c-.897.383-1.917.574-3.058.574zm-.113-7.406c.928 0 1.722-.222 2.38-.668.66-.451 1.165-1.098 1.516-1.938.351-.841.527-1.841.527-3.002 0-1.13-.173-2.13-.518-3.002-.345-.878-.847-1.569-1.506-2.07-.652-.509-1.452-.763-2.399-.763-.966 0-1.782.26-2.447.782-.665.52-1.167 1.223-1.506 2.107-.338.879-.508 1.86-.508 2.946 0 1.104.173 2.08.518 2.926.345.841.85 1.5 1.515 1.977.665.47 1.474.706 2.428.706z"></path></g></svg></a></div><ul class="qfu855-4 fyvoSS"><li class="qfu855-5 dQKcqD"><a href="/blog/developers/" class="qfu855-6 fQFuzE">Developers</a></li><li class="qfu855-5 dQKcqD"><a href="/blog/identity-and-security/" class="qfu855-6 fQFuzE">Identity &amp; Security</a></li><li class="qfu855-5 dQKcqD"><a href="/blog/business/" class="qfu855-6 fQFuzE">Business</a></li><li class="qfu855-5 dQKcqD"><a href="/blog/leadership/" class="qfu855-6 fQFuzE">Leadership</a></li><li class="qfu855-5 dQKcqD"><a href="/blog/culture/" class="qfu855-6 fQFuzE">Culture</a></li><li class="qfu855-5 dQKcqD"><a href="/blog/engineering/" class="qfu855-6 fQFuzE">Engineering</a></li><li class="qfu855-5 dQKcqD"><a href="/blog/announcements/" class="qfu855-6 fQFuzE">Announcements</a></li></ul><div class="qfu855-7 hVUOsD"><button class="qfu855-9 fzCeRu">Talk To Sales</button><a href="/signup?&amp;signUpData=%7B%22category%22%3A%22button%22%7D" class="qfu855-10 kjKZJW">Sign Up</a><div class="qfu855-11 bUpImh"><img src="https://cdn.auth0.com/website/blog-new/search-icon-desktop.svg" alt="search icon" class="qfu855-13 ggbIzm"/></div></div><div class="qfu855-8 bMXPDE"><div class="qfu855-12 fQdvpT"><img src="https://cdn.auth0.com/website/blog-new/search-icon-mobile.svg" alt="search icon" class="qfu855-13 ggbIzm"/></div><img src="https://cdn.auth0.com/website/blog-new/hamburger-menu.svg" alt="hamburger menu icon" class="qfu855-14 cOJQfD"/></div></div></nav><div class="lwvj4y-0 eJSREB"><img src="https://cdn.auth0.com/website/blog-new/close-button-desktop.svg" alt="close icon" class="lwvj4y-3 gIKTKh"/></div><div class="qfu855-15 huIner"><ul class="qfu855-16 dPBwKt"><li class="qfu855-17 hdfvqY"><a href="/blog/developers/" class="qfu855-18 gINsin">Developers</a></li><li class="qfu855-17 hdfvqY"><a href="/blog/identity-and-security/" class="qfu855-18 gINsin">Identity &amp; Security</a></li><li class="qfu855-17 hdfvqY"><a href="/blog/business/" class="qfu855-18 gINsin">Business</a></li><li class="qfu855-17 hdfvqY"><a href="/blog/leadership/" class="qfu855-18 gINsin">Leadership</a></li><li class="qfu855-17 hdfvqY"><a href="/blog/culture/" class="qfu855-18 gINsin">Culture</a></li><li class="qfu855-17 hdfvqY"><a href="/blog/engineering/" class="qfu855-18 gINsin">Engineering</a></li><li class="qfu855-17 hdfvqY"><a href="/blog/announcements/" class="qfu855-18 gINsin">Announcements</a></li><li class="qfu855-19 jWrqOS"><a href="/signup?&amp;signUpData=%7B%22category%22%3A%22button%22%7D" class="qfu855-20 qqefI">Try Auth0 For Free</a><button class="qfu855-21 hkSJcp">Talk To Sales</button></li></ul></div><div itemscope="" itemType="http://schema.org/BlogPosting" itemProp="mainEntity"><link itemProp="mainEntityOfPage" href="/blog/full-stack-java-with-react-spring-boot-and-jhipster/"/><section class="v0njjd-0 kEXVJZ"><header class="bie152-0 dQGrL"><div class="bie152-3 hzQAvt"><div class="bie152-2 iBZoKk"><figure><img src="https://images.ctfassets.net/23aumh6u8s0i/3l9uOb30e8RqDsuGcE1Uvx/4fe4b3f05831c5502494f1c08987578a/jhispter_hero.jpg" width="1176" height="1056" class="bie152-19 klcxrk"/></figure></div><div class="bie152-4 zWfns"><div class="bie152-5 gjPoRq"><span id="post-category" class="bie152-6 kuZGke">Java</span><h1 itemProp="headline" class="bie152-7 dNLsmV">Full Stack Java with React, Spring Boot, and JHipster</h1><p itemProp="description" class="bie152-8 BxKyh">This tutorial shows you how to create a slick-looking, full-stack, secure application using React, Spring Boot, and JHipster.</p></div><div class="bie152-9 PPWcH"><div itemProp="author" itemscope="" itemType="http://schema.org/Person" class="bie152-10 kTTSlD"><a itemProp="url" href="/blog/authors/matt-raible/" class="bie152-11 SbeZk"><img width="400" height="400" src="https://images.ctfassets.net/23aumh6u8s0i/1ciaQDb4CM5f7DxRX8gqUG/9d23ca769683d021a01d4702a2e4ffad/matt-raible.jpeg" alt="Matt Raible avatar" class="bie152-12 kAjmGL"/><div class="bie152-13 coofmK"><div itemProp="name" class="bie152-14 czqHud">Matt Raible</div><div itemProp="jobTitle" class="bie152-15 fCRjyY">Developer Advocate at Okta</div></div></a></div></div><p class="bie152-16 hFSvgw">Last Updated On: January 27, 2022</p><meta itemProp="datePublished" content="2021-11-03"/><meta itemProp="dateModified" content="2022-01-27"/></div><div class="bie152-1 fobSsY"><div class="bie152-17 gZejMy"><figure itemProp="image" itemscope="" itemType="http://schema.org/ImageObject" class="bie152-18 jPVgBI"><meta itemProp="url" content="https://images.ctfassets.net/23aumh6u8s0i/3l9uOb30e8RqDsuGcE1Uvx/4fe4b3f05831c5502494f1c08987578a/jhispter_hero.jpg"/><meta itemProp="width" content="1176"/><meta itemProp="height" content="1056"/></figure></div></div></div></header><article class="v0njjd-1 dHwRRo"><aside class="sc-1y9xkzh-0 bMXvsY"><div class="sc-1y9xkzh-1 hTZJuI"><ul class="sc-1y9xkzh-8 iHLAoI"><li data-element-id="blogSidebarDocsCTA" class="sc-1y9xkzh-9 kSDgak"><a href="https://auth0.com/docs" target="_blank" rel="noopener" class="sc-1y9xkzh-10 gUppOI"><span class="sc-1y9xkzh-11 iKGOGZ">Auth0 Docs</span><span class="sc-1y9xkzh-12 giJJK"><img alt="Open external link" src="https://cdn.auth0.com/website/blog/external-link.svg"/></span><br/><span>Implement Authentication in Minutes</span></a></li><li data-element-id="blogSidebarAdCTA" class="sc-1y9xkzh-9 kSDgak"><a href="https://auth0.com/resources/whitepapers/build-vs-buy-evaluating-identity-management/email" target="_blank" rel="noopener noreferrer"><img src="https://cdn.auth0.com/website/blog/build-buy-cta-box.svg" width="250" height="164" alt="build or buy icon" class="sc-127chv3-0 iCQnTv"/></a></li></ul></div></aside><div id="post-content" itemProp="articleBody" class="nlufiy-0 jWmJon"><div><p>If you search for &quot;Full Stack Java&quot; on the internet, you&#x27;ll likely find a lot of recruiting, courses, and jobs. Being a full-stack developer can be exciting because you can create the backend and frontend of an app all by yourself. There is business logic and algorithms as well as like styling, making things look good, and securing everything. It also pays pretty well. Today, I&#x27;m going to show you how you can be a full-stack Java developer with Spring Boot, React, and JHipster.</p><p><strong>Prerequisites:</strong></p><ul><li><a href="https://nodejs.org/" target="_blank" rel="noreferrer noopener">Node.js 14+</a></li><li><a href="https://sdkman.io" target="_blank" rel="noreferrer noopener">Java 11+</a></li><li><a href="https://docs.docker.com/compose/install/" target="_blank" rel="noreferrer noopener">Docker Compose</a></li></ul><p>If you&#x27;re on Windows, you may need to install the <a href="https://docs.microsoft.com/en-us/windows/wsl/about" target="_blank" rel="noreferrer noopener">Windows Subsystem for Linux</a> for some commands to work.</p><p>I recommend using SDKMAN to manage your OpenJDK installations. Just run <code class="language-js">sdk install java <span class="token number">11.0</span><span class="token number">.2</span><span class="token operator">-</span>open</code> to install Java 11 and <code class="language-js">sdk install java <span class="token number">17</span><span class="token operator">-</span>open</code> for Java 17.</p><p>This tutorial won&#x27;t provide the nitty-gritty details on how to write code in Java, React, or Spring Boot. That&#x27;s because JHipster will write most of the code for you! However, if you&#x27;re brand new to programming with these technologies, I recommend the following resources:</p><ul><li><a href="https://dev.java/learn/" target="_blank" rel="noreferrer noopener">Oracle&#x27;s Learn Java Tutorials</a></li><li><a href="https://spring.io/guides" target="_blank" rel="noreferrer noopener">Spring Guides</a></li><li><a href="https://reactjs.org/tutorial/tutorial.html" target="_blank" rel="noreferrer noopener">Tutorial: Intro to React</a></li></ul><p>You can skip around between sections of this tutorial using the table of contents below. </p><p>You can also clone <a href="https://github.com/oktadev/auth0-full-stack-java-example" target="_blank" rel="noreferrer noopener">the completed example</a> and follow along that way.</p><pre><code class="language-js">git clone https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>github<span class="token punctuation">.</span>com<span class="token operator">/</span>oktadev<span class="token operator">/</span>auth0<span class="token operator">-</span>full<span class="token operator">-</span>stack<span class="token operator">-</span>java<span class="token operator">-</span>example</code></pre><p>If you&#x27;re more of a visual learner, you can watch the screencast below from the <a href="https://youtu.be/PECnQs5bVbQ" target="_blank" rel="noreferrer noopener">OktaDev YouTube channel</a>.</p><div class="embed-container" style="position:relative;padding-bottom:56.25%;height:0;overflow:hidden;max-width:100%;margin-bottom:40px;:"><iframe style="position:absolute;top:0;left:0;width:100%;height:100%;:" src="https://www.youtube.com/embed/PECnQs5bVbQ" frameBorder="0" allowfullscreen=""></iframe></div><h2 id="Full-Stack-Development-with-React-and-Spring-Boot">Full Stack Development with React and Spring Boot</h2><p>One of the easiest ways to get started with React is by using <a href="https://create-react-app.dev/" target="_blank" rel="noreferrer noopener">Create React App</a> (CRA). You install it locally, then run <code class="language-js">create<span class="token operator">-</span>react<span class="token operator">-</span>app <span class="token operator">&lt;</span>project<span class="token operator">></span></code> to generate a React application with minimal dependencies. It uses webpack under-the-covers to build the project, launch a web server, and run its tests.</p><p>Spring Boot has a similar tool called <a href="https://start.spring.io/" target="_blank" rel="noreferrer noopener">Spring Initializr</a>. Spring Initializer is a bit different than CRA because it&#x27;s a website (and API) that you can create applications with.</p><p>Today, I&#x27;ll show you how to build a Flickr clone with React and Spring Boot. However, I&#x27;m going to cheat. Rather than building everything using the aforementioned tools, I&#x27;m going to use JHipster. JHipster is an application generator that initially only supported Angular and Spring Boot. Now it supports Angular, React, and Vue for the frontend. JHipster also has support for <a href="https://www.jhipster.tech/modules/official-blueprints/" target="_blank" rel="noreferrer noopener">Kotlin, Micronaut, Quarkus, .NET, and Node.js</a> on the backend.</p><p>In this tutorial, we&#x27;ll use React since it seems to be <a href="https://trends.google.com/trends/explore?q=angular,react,vuejs" target="_blank" rel="noreferrer noopener">the most popular</a> frontend framework nowadays. </p><h2 id="Get-Started-with-JHipster-7">Get Started with JHipster 7</h2><p>If you haven&#x27;t heard of <a href="https://www.jhipster.tech" target="_blank" rel="noreferrer noopener">JHipster</a>, boy do I have a treat for you! JHipster started as a Yeoman application generator back in 2013 and has grown to become a development platform. It allows you to quickly generate, develop, and deploy modern web apps and microservice architectures. Today, I&#x27;ll show you how to build a Flickr clone with JHipster and lock it down with OAuth and OpenID Connect (OIDC).</p><p>To get started with JHipster, you&#x27;ll need a fast internet connection and Node.js installed. The project recommends you use the latest LTS (Long Term Support) version, which is 14.7.6 at the time of this writing. To run the app, you&#x27;ll need to have Java 11 installed. If you have Git installed, JHipster will auto-commit your project after creating it. This will allow you to upgrade between versions.</p><p>Run the following command to install JHipster:</p><pre><code class="language-shell"><span class="token function">npm</span> i -g generator-jhipster@7</code></pre><p>To create a full-stack app with JHipster, create a directory, and run <code class="language-js">jhipster</code> in it:</p><pre><code class="language-shell"><span class="token function">mkdir</span> full-stack-java
<span class="token builtin class-name">cd</span> full-stack-java
jhipster</code></pre><p>JHipster will prompt you for the type of application to create and what technologies you&#x27;d like to include. For this tutorial, make the following choices:</p><table><thead><tr><th>Question</th><th>Answer</th></tr></thead><tbody><tr><td>Type of application?</td><td><code class="language-js">Monolithic application</code></td></tr><tr><td>Name?</td><td><code class="language-js">flickr2</code></td></tr><tr><td>Spring WebFlux?</td><td><code class="language-js">No</code></td></tr><tr><td>Java package name?</td><td><code class="language-js">com<span class="token punctuation">.</span>auth0<span class="token punctuation">.</span>flickr2</code></td></tr><tr><td>Type of authentication?</td><td><code class="language-js">OAuth <span class="token number">2.0</span> <span class="token operator">/</span> <span class="token constant">OIDC</span></code></td></tr><tr><td>Type of database?</td><td><code class="language-js"><span class="token constant">SQL</span></code></td></tr><tr><td>Production database?</td><td><code class="language-js">PostgreSQL</code></td></tr><tr><td>Development database?</td><td><code class="language-js"><span class="token constant">H2</span> <span class="token keyword">with</span> disk<span class="token operator">-</span>based persistence</code></td></tr><tr><td>Which cache?</td><td><code class="language-js">Ehcache</code></td></tr><tr><td>Use Hibernate 2nd level cache?</td><td><code class="language-js">Yes</code></td></tr><tr><td>Maven or Gradle?</td><td><code class="language-js">Maven</code></td></tr><tr><td>Use the JHipster Registry?</td><td><code class="language-js">No</code></td></tr><tr><td>Other technologies?</td><td><code class="language-js"><span class="token operator">&lt;</span>blank<span class="token operator">></span></code></td></tr><tr><td>Client framework?</td><td><code class="language-js">React</code></td></tr><tr><td>Admin UI?</td><td><code class="language-js">Yes</code></td></tr><tr><td>Bootswatch theme?</td><td><code class="language-js">United</code> &gt; <code class="language-js">Dark</code></td></tr><tr><td>Enable i18n?</td><td><code class="language-js">Yes</code></td></tr><tr><td>Native language of application?</td><td><code class="language-js">English</code></td></tr><tr><td>Additional languages?</td><td>Your choice!</td></tr><tr><td>Additional testing frameworks?</td><td><code class="language-js">Cypress</code></td></tr><tr><td>Install other generators?</td><td><code class="language-js">No</code></td></tr></tbody></table><br/><p>Press <strong>Enter</strong>, and JHipster will create your app in the current directory and run <code class="language-js">npm install</code> to install all the dependencies specified in <code class="language-js"><span class="token keyword">package</span><span class="token punctuation">.</span>json</code>.</p><h3 id="Verify-Everything-Works-with-Cypress-and-Keycloak">Verify Everything Works with Cypress and Keycloak</h3><p>When you choose OAuth 2.0 and OIDC for authentication, the users are stored outside of the application rather than in it. You need to configure an identity provider (IdP) to store your users and allow your app to retrieve information about them. By default, JHipster ships with a Keycloak file for Docker Compose. A default set of users and groups is imported at startup, and it has a client registered for your JHipster app.</p><p>Here&#x27;s what the <code class="language-js">keycloak<span class="token punctuation">.</span>yml</code> looks like in your app&#x27;s <code class="language-js">src<span class="token operator">/</span>main<span class="token operator">/</span>docker</code> directory:</p><pre><code class="language-yaml"><span class="token comment"># This configuration is intended for development purpose; it's **your** responsibility</span>
<span class="token comment"># to harden it for production</span>
<span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">'3.8'</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">keycloak</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> jboss/keycloak<span class="token punctuation">:</span>15.0.2
    <span class="token key atrule">command</span><span class="token punctuation">:</span>
      <span class="token punctuation">[</span>
          <span class="token string">'-b'</span><span class="token punctuation">,</span>
          <span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>
          <span class="token string">'-Dkeycloak.migration.action=import'</span><span class="token punctuation">,</span>
          <span class="token string">'-Dkeycloak.migration.provider=dir'</span><span class="token punctuation">,</span>
          <span class="token string">'-Dkeycloak.migration.dir=/opt/jboss/keycloak/realm-config'</span><span class="token punctuation">,</span>
          <span class="token string">'-Dkeycloak.migration.strategy=OVERWRITE_EXISTING'</span><span class="token punctuation">,</span>
          <span class="token string">'-Djboss.socket.binding.port-offset=1000'</span><span class="token punctuation">,</span>
          <span class="token string">'-Dkeycloak.profile.feature.upload_scripts=enabled'</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span>
    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> ./realm<span class="token punctuation">-</span>config<span class="token punctuation">:</span>/opt/jboss/keycloak/realm<span class="token punctuation">-</span>config
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> KEYCLOAK_USER=admin
      <span class="token punctuation">-</span> KEYCLOAK_PASSWORD=admin
      <span class="token punctuation">-</span> DB_VENDOR=h2
    <span class="token comment"># If you want to expose these ports outside your dev PC,</span>
    <span class="token comment"># remove the "127.0.0.1:" prefix</span>
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> 127.0.0.1<span class="token punctuation">:</span>9080<span class="token punctuation">:</span><span class="token number">9080</span>
      <span class="token punctuation">-</span> 127.0.0.1<span class="token punctuation">:</span>9443<span class="token punctuation">:</span><span class="token number">9443</span>
      <span class="token punctuation">-</span> 127.0.0.1<span class="token punctuation">:</span>10990<span class="token punctuation">:</span><span class="token number">10990</span></code></pre><p>Start Keycloak with the following command in your project&#x27;s root directory.</p><pre><code class="language-shell">docker-compose -f src/main/docker/keycloak.yml up -d</code></pre><p>You can verify everything works by starting your app with Maven:</p><pre><code class="language-shell">./mvnw</code></pre><p>Open another terminal to run your new app&#x27;s Cypress tests:</p><pre><code class="language-shell"><span class="token function">npm</span> run e2e</code></pre><p>You should see output like the following:</p><pre><code class="language-shell">  <span class="token punctuation">(</span>Run Finished<span class="token punctuation">)</span>

       Spec                                              Tests  Passing  Failing  Pending  Skipped
  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐
  │ ✔  administration/administration.spec.      00:12        <span class="token number">5</span>        <span class="token number">5</span>        -        -        - │
  │    ts                                                                                          │
  └────────────────────────────────────────────────────────────────────────────────────────────────┘
    ✔  All specs passed<span class="token operator">!</span>                        00:12        <span class="token number">5</span>        <span class="token number">5</span>        -        -        -</code></pre><h2 id="Change-Your-Identity-Provider-to-Auth0">Change Your Identity Provider to Auth0</h2><p>JHipster uses Spring Security&#x27;s OAuth 2.0 and OIDC support to configure which IdP it uses. When using Spring Security with Spring Boot, you can configure most settings in a properties file. You can even override properties with environment variables.</p><p>To switch from Keycloak to Auth0, you only need to override the default properties (for Spring Security OAuth). You don&#x27;t even need to write any code!</p><p>To see how it works, create a <code class="language-js"><span class="token punctuation">.</span>auth0<span class="token punctuation">.</span>env</code> file in the root of your project, and fill it with the code below to override the default OIDC settings:</p><pre><code class="language-shell"><span class="token builtin class-name">export</span> <span class="token assign-left variable">SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_OIDC_ISSUER_URI</span><span class="token operator">=</span>https://<span class="token operator">&lt;</span>your-auth0-domain<span class="token operator">></span>/
<span class="token builtin class-name">export</span> <span class="token assign-left variable">SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_ID</span><span class="token operator">=</span><span class="token operator">&lt;</span>your-client-id<span class="token operator">></span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_SECRET</span><span class="token operator">=</span><span class="token operator">&lt;</span>your-client-secret<span class="token operator">></span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">JHIPSTER_SECURITY_OAUTH2_AUDIENCE</span><span class="token operator">=</span>https://<span class="token operator">&lt;</span>your-auth0-domain<span class="token operator">></span>/api/v2/</code></pre><p>⚠️ <strong>WARNING:</strong> Modify your existing <code class="language-js"><span class="token punctuation">.</span>gitignore</code> file to have <code class="language-js"><span class="token operator">*</span><span class="token punctuation">.</span>env</code> so you don&#x27;t accidentally check in your secrets!</p><p>You&#x27;ll need to create a new web application in Auth0 and fill in the <code class="language-js"><span class="token operator">&lt;</span><span class="token operator">...</span><span class="token operator">></span></code> placeholders before this works. </p><h3 id="Create-an-OpenID-Connect-App-on-Auth0">Create an OpenID Connect App on Auth0</h3><p>Log in to your Auth0 account (or <a href="https://auth0.com/signup" target="_blank" rel="noreferrer noopener">sign up</a> if you don&#x27;t have an account). You should have a unique domain like <code class="language-js">dev<span class="token operator">-</span>xxx<span class="token punctuation">.</span>eu<span class="token punctuation">.</span>auth0<span class="token punctuation">.</span>com</code>. </p><p>Press the <strong>Create Application</strong> button in <a href="https://manage.auth0.com/#/applications" target="_blank" rel="noreferrer noopener">Applications section</a>. Use a name like <code class="language-js">JHipster Baby<span class="token operator">!</span></code>, select <code class="language-js">Regular Web Applications</code>, and click <strong>Create</strong>.</p><p>Switch to the <strong>Settings</strong> tab and configure your application settings:</p><ul><li>Allowed Callback URLs: <code class="language-js">http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8080</span><span class="token operator">/</span>login<span class="token operator">/</span>oauth2<span class="token operator">/</span>code<span class="token operator">/</span>oidc</code></li><li>Allowed Logout URLs: <code class="language-js">http<span class="token operator">:</span><span class="token operator">/</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">localhost:8080</span><span class="token regex-delimiter">/</span></span></code></li></ul><p>Scroll to the bottom and click <strong>Save Changes</strong>.</p><p>In the <a href="https://manage.auth0.com/#/roles" target="_blank" rel="noreferrer noopener">roles</a> section, create new roles named <code class="language-js"><span class="token constant">ROLE_ADMIN</span></code> and <code class="language-js"><span class="token constant">ROLE_USER</span></code>.</p><p>Create a new user account in the <a href="https://manage.auth0.com/#/users" target="_blank" rel="noreferrer noopener">users</a> section. Click on the <strong>Role</strong> tab to assign the roles you just created to the new account. </p><p><em>Make sure your new user&#x27;s email is verified before attempting to log in!</em></p><p>Next, head to <strong>Auth Pipeline</strong> &gt; <strong>Rules</strong> &gt; <strong>Create</strong>. Select the <code class="language-js">Empty rule</code> template. Provide a meaningful name like <code class="language-js">Group claims</code> and replace the Script content with the following.</p><pre><code class="language-js"><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">user<span class="token punctuation">,</span> context<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  user<span class="token punctuation">.</span>preferred_username <span class="token operator">=</span> user<span class="token punctuation">.</span>email<span class="token punctuation">;</span>
  <span class="token keyword">const</span> roles <span class="token operator">=</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>authorization <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span>roles<span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">prepareCustomClaimKey</span><span class="token punctuation">(</span><span class="token parameter">claim</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://www.jhipster.tech/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>claim<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">const</span> rolesClaim <span class="token operator">=</span> <span class="token function">prepareCustomClaimKey</span><span class="token punctuation">(</span><span class="token string">'roles'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>idToken<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    context<span class="token punctuation">.</span>idToken<span class="token punctuation">[</span>rolesClaim<span class="token punctuation">]</span> <span class="token operator">=</span> roles<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span>accessToken<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    context<span class="token punctuation">.</span>accessToken<span class="token punctuation">[</span>rolesClaim<span class="token punctuation">]</span> <span class="token operator">=</span> roles<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> user<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre><p>This code is adding the user&#x27;s roles to a custom claim (prefixed with <code class="language-js">https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>jhipster<span class="token punctuation">.</span>tech<span class="token operator">/</span>roles</code>). This claim is mapped to Spring Security authorities in <code class="language-js">SecurityUtils<span class="token punctuation">.</span>java</code>.</p><pre><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GrantedAuthority</span><span class="token punctuation">></span></span> <span class="token function">extractAuthorityFromClaims</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> claims<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">mapRolesToGrantedAuthorities</span><span class="token punctuation">(</span><span class="token function">getRolesFromClaims</span><span class="token punctuation">(</span>claims<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">"unchecked"</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token function">getRolesFromClaims</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span></span> claims<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> claims<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>
        <span class="token string">"groups"</span><span class="token punctuation">,</span>
        claims<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span><span class="token string">"roles"</span><span class="token punctuation">,</span> claims<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>CLAIMS_NAMESPACE <span class="token operator">+</span> <span class="token string">"roles"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GrantedAuthority</span><span class="token punctuation">></span></span> <span class="token function">mapRolesToGrantedAuthorities</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> roles<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> roles<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>role <span class="token operator">-></span> role<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"ROLE_"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">SimpleGrantedAuthority</span><span class="token operator">::</span><span class="token keyword">new</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre><p>The <code class="language-js">SecurityConfiguration<span class="token punctuation">.</span>java</code> class has a bean that calls this method to configure a user&#x27;s roles from their OIDC data.</p><pre><code class="language-java"><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">GrantedAuthoritiesMapper</span> <span class="token function">userAuthoritiesMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> authorities <span class="token operator">-></span> <span class="token punctuation">{</span>
        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">GrantedAuthority</span><span class="token punctuation">></span></span> mappedAuthorities <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        authorities<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>authority <span class="token operator">-></span> <span class="token punctuation">{</span>
            <span class="token comment">// Check for OidcUserAuthority because Spring Security 5.2 returns</span>
            <span class="token comment">// each scope as a GrantedAuthority, which we don't care about.</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>authority <span class="token keyword">instanceof</span> <span class="token class-name">OidcUserAuthority</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">OidcUserAuthority</span> oidcUserAuthority <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">OidcUserAuthority</span><span class="token punctuation">)</span> authority<span class="token punctuation">;</span>
                mappedAuthorities<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">SecurityUtils</span><span class="token punctuation">.</span><span class="token function">extractAuthorityFromClaims</span><span class="token punctuation">(</span>oidcUserAuthority<span class="token punctuation">.</span><span class="token function">getUserInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClaims</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> mappedAuthorities<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span></code></pre><p>Click <strong>Save changes</strong> to continue.</p><p>ℹ️ <strong>NOTE</strong>: Want to have all these steps automated for you? Vote for <a href="https://github.com/auth0/auth0-cli/issues/351" target="_blank" rel="noreferrer noopener">this issue</a> in the Auth0 CLI project.</p><h3 id="Run-Your-JHipster-App-with-Auth0">Run Your JHipster App with Auth0</h3><p>Stop your JHipster app using <strong>Ctrl+C</strong>, set your Auth0 properties in <code class="language-js"><span class="token punctuation">.</span>auth0<span class="token punctuation">.</span>env</code>, and start your app again.</p><pre><code class="language-shell"><span class="token builtin class-name">source</span> .auth0.env
./mvnw</code></pre><p><em>Voilà</em> - your full-stack app is now using Auth0! Open your favorite browser to <code class="language-js">http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>localhost<span class="token operator">:</span><span class="token number">8080</span></code>. </p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/1Zma6iIU9n6P4CguG8CcQh/e7faa31be47593107329d0128d947b0a/04_jhipster-homepage.png" alt="JHipster default homepage" class=" lightbox-image"/></p><p>You should see your app&#x27;s homepage with a link to sign in. Click <strong>sign in</strong>, and you&#x27;ll be redirected to Auth0 to log in.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/M4rpafdRgJwaqkvm7gaZl/578bd56bd6c85bbdc180aeb7537d3a63/02_auth0-login.png" alt="Auth0 Login" class=" lightbox-image"/></p><p>After entering your credentials, you&#x27;ll be redirected back to your app. </p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/7CBL7VFB4PSkcazRLSIyEG/6da5d9f23d170ba3c9b1e5c492220af7/05_jhipster-logged-in.png" alt="Authenticated" class=" lightbox-image"/></p><h2 id="Test-Your-Full-Stack-Java-App-with-Cypress">Test Your Full Stack Java App with Cypress</h2><p>JHipster has Auth0 support built-in, so you can specify your credentials for Cypress tests and automate your UI testing!</p><p>To do this, open a new terminal window, specify the credentials for the Auth0 user you just created, and run <code class="language-js">npm run e2e</code>.</p><pre><code class="language-shell"><span class="token builtin class-name">export</span> <span class="token assign-left variable">CYPRESS_E2E_USERNAME</span><span class="token operator">=</span><span class="token operator">&lt;</span>new-username<span class="token operator">></span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">CYPRESS_E2E_PASSWORD</span><span class="token operator">=</span><span class="token operator">&lt;</span>new-password<span class="token operator">></span>
<span class="token function">npm</span> run e2e</code></pre><p><strong>TIP:</strong> If you want to use a <code class="language-js"><span class="token punctuation">.</span>env</code> file for your environment variables, you can use <a href="https://www.npmjs.com/package/cypress-dotenv" target="_blank" rel="noreferrer noopener">cypress-dotenv</a>. You can also put these values in <code class="language-js">cypress<span class="token punctuation">.</span>json</code>, but since this file will be in source control, it&#x27;s a bad practice to put your secrets in it.</p><p>Everything should pass in around a minute.</p><pre><code class="language-shell">       Spec                                              Tests  Passing  Failing  Pending  Skipped
  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐
  │ ✔  administration/administration.spec.      00:31        <span class="token number">5</span>        <span class="token number">5</span>        -        -        - │
  │    ts                                                                                          │
  └────────────────────────────────────────────────────────────────────────────────────────────────┘
    ✔  All specs passed<span class="token operator">!</span>                        00:31        <span class="token number">5</span>        <span class="token number">5</span>        -        -        -

Execution time: <span class="token number">44</span> s.</code></pre><p>Shut down the process running your JHipster app - it&#x27;s time to create some data handling for your Flickr clone!</p><h2 id="Create-Entities-to-allow-CRUD-on-Photos">Create Entities to allow CRUD on Photos</h2><p>I&#x27;ve talked a lot about how to secure your application, but we haven&#x27;t done anything with photos! JHipster has a JDL (JHipster Domain Language) feature that allows you to model the data in your app and generate entities from it. You can use the <a href="https://start.jhipster.tech/jdl-studio/" target="_blank" rel="noreferrer noopener">JDL Studio</a> to do this online and save it locally once you&#x27;ve finished.</p><p>My data model for this app has <code class="language-js">Album</code>, <code class="language-js">Photo</code>, and <code class="language-js">Tag</code> entities and sets up relationships between them. Below is a screenshot of what it looks like in JDL Studio.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/73z2OABdygvcVuMzVCzjIP/7d9a84eb719ecac66290b367ecaa3682/03_jdl-studio.png" alt="JDL Studio" class=" lightbox-image"/></p><p>Copy the JDL below and save it in a <code class="language-js">flickr2<span class="token punctuation">.</span>jdl</code> file in the root directory of your project.</p><pre><code class="language-js">entity Album <span class="token punctuation">{</span>
  title String required
  description TextBlob
  created Instant
<span class="token punctuation">}</span>

entity Photo <span class="token punctuation">{</span>
  title String required
  description TextBlob
  image ImageBlob required
  height Integer
  width Integer
  taken Instant
  uploaded Instant
<span class="token punctuation">}</span>

entity Tag <span class="token punctuation">{</span>
  name String required <span class="token function">minlength</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

relationship ManyToOne <span class="token punctuation">{</span>
  Album<span class="token punctuation">{</span><span class="token function">user</span><span class="token punctuation">(</span>login<span class="token punctuation">)</span><span class="token punctuation">}</span> to User
  Photo<span class="token punctuation">{</span><span class="token function">album</span><span class="token punctuation">(</span>title<span class="token punctuation">)</span><span class="token punctuation">}</span> to Album
<span class="token punctuation">}</span>

relationship ManyToMany <span class="token punctuation">{</span>
  Photo<span class="token punctuation">{</span><span class="token function">tag</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">}</span> to Tag<span class="token punctuation">{</span>photo<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

paginate Album <span class="token keyword">with</span> pagination
paginate Photo<span class="token punctuation">,</span> Tag <span class="token keyword">with</span> infinite<span class="token operator">-</span>scroll</code></pre><p>You can generate entities and <a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete" target="_blank" rel="noreferrer noopener">CRUD</a> code (Java for Spring Boot; TypeScript and JSX for React) by using the following command:</p><pre><code class="language-shell">jhipster jdl flickr2.jdl</code></pre><p>When prompted, type <code class="language-js">a</code> to allow overwriting of existing files.</p><p>This process will create Liquibase changelog files (to create your database tables), entities, repositories, Spring MVC controllers, and all the React code necessary to create, read, update, and delete your entities. It&#x27;ll even generate JUnit unit tests, Jest unit tests, and Cypress end-to-end tests!</p><p>After the process completes, you can restart your app, log in, and browse through the <strong>Entities</strong> menu. Try adding some data to confirm everything works.</p><p>By now, you can see that JHipster is pretty powerful. It recognized that you had an image property of <code class="language-js">ImageBlob</code> type and created the logic necessary to upload and store images in your database! <em>Booyah!</em></p><h2 id="Add-Image-EXIF-Processing-in-Your-Spring-Boot-API">Add Image EXIF Processing in Your Spring Boot API</h2><p>The <code class="language-js">Photo</code> entity has a few properties that can be calculated by reading the uploaded photo&#x27;s <a href="https://yourphotoadvisor.com/understanding-exif-data-what-it-is-and-what-to-do-with-it/" target="_blank" rel="noreferrer noopener">EXIF</a> (Exchangeable Image File Format) data. You might ask, how do you do that in Java?</p><p>Thankfully, Drew Noakes created a <a href="https://github.com/drewnoakes/metadata-extractor" target="_blank" rel="noreferrer noopener">metadata-extractor</a> library to do just that. Add a dependency on Drew&#x27;s library to your <code class="language-js">pom<span class="token punctuation">.</span>xml</code>:</p><pre><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.drewnoakes<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>metadata-extractor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.16.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>Then modify the <code class="language-js">PhotoResource<span class="token function">#createPhoto</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> method to set the metadata when an image is uploaded.</p><pre><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>drew<span class="token punctuation">.</span>imaging<span class="token punctuation">.</span></span><span class="token class-name">ImageMetadataReader</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>drew<span class="token punctuation">.</span>imaging<span class="token punctuation">.</span></span><span class="token class-name">ImageProcessingException</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>drew<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span></span><span class="token class-name">Metadata</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>drew<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span></span><span class="token class-name">MetadataException</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>drew<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>exif<span class="token punctuation">.</span></span><span class="token class-name">ExifSubIFDDirectory</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>drew<span class="token punctuation">.</span>metadata<span class="token punctuation">.</span>jpeg<span class="token punctuation">.</span></span><span class="token class-name">JpegDirectory</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>bind<span class="token punctuation">.</span></span><span class="token class-name">DatatypeConverter</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">BufferedInputStream</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">InputStream</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">Instant</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhotoResource</span> <span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

    <span class="token keyword">public</span> <span class="token class-name">ResponseEntity</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Photo</span><span class="token punctuation">></span></span> <span class="token function">createPhoto</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Valid</span> <span class="token annotation punctuation">@RequestBody</span> <span class="token class-name">Photo</span> photo<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"REST request to save Photo : {}"</span><span class="token punctuation">,</span> photo<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>photo<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">BadRequestAlertException</span><span class="token punctuation">(</span><span class="token string">"A new photo cannot already have an ID"</span><span class="token punctuation">,</span> ENTITY_NAME<span class="token punctuation">,</span> <span class="token string">"idexists"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            photo <span class="token operator">=</span> <span class="token function">setMetadata</span><span class="token punctuation">(</span>photo<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ImageProcessingException</span> ipe<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>ipe<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">Photo</span> result <span class="token operator">=</span> photoRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>photo<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">ResponseEntity</span>
            <span class="token punctuation">.</span><span class="token function">created</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">URI</span><span class="token punctuation">(</span><span class="token string">"/api/photos/"</span> <span class="token operator">+</span> result<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">headers</span><span class="token punctuation">(</span><span class="token class-name">HeaderUtil</span><span class="token punctuation">.</span><span class="token function">createEntityCreationAlert</span><span class="token punctuation">(</span>applicationName<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> ENTITY_NAME<span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">body</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token class-name">Photo</span> <span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token class-name">Photo</span> photo<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ImageProcessingException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">MetadataException</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token class-name">DatatypeConverter</span><span class="token punctuation">.</span><span class="token function">printBase64Binary</span><span class="token punctuation">(</span>photo<span class="token punctuation">.</span><span class="token function">getImage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> data2 <span class="token operator">=</span> <span class="token class-name">DatatypeConverter</span><span class="token punctuation">.</span><span class="token function">parseBase64Binary</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">InputStream</span> inputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">BufferedInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>inputStream<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Metadata</span> metadata <span class="token operator">=</span> <span class="token class-name">ImageMetadataReader</span><span class="token punctuation">.</span><span class="token function">readMetadata</span><span class="token punctuation">(</span>bis<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ExifSubIFDDirectory</span> directory <span class="token operator">=</span> metadata<span class="token punctuation">.</span><span class="token function">getFirstDirectoryOfType</span><span class="token punctuation">(</span><span class="token class-name">ExifSubIFDDirectory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>directory <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">Date</span> date <span class="token operator">=</span> directory<span class="token punctuation">.</span><span class="token function">getDateDigitized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>date <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                photo<span class="token punctuation">.</span><span class="token function">setTaken</span><span class="token punctuation">(</span>date<span class="token punctuation">.</span><span class="token function">toInstant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>photo<span class="token punctuation">.</span><span class="token function">getTaken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">"Photo EXIF date digitized not available, setting taken on date to now..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            photo<span class="token punctuation">.</span><span class="token function">setTaken</span><span class="token punctuation">(</span><span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        photo<span class="token punctuation">.</span><span class="token function">setUploaded</span><span class="token punctuation">(</span><span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">JpegDirectory</span> jpgDirectory <span class="token operator">=</span> metadata<span class="token punctuation">.</span><span class="token function">getFirstDirectoryOfType</span><span class="token punctuation">(</span><span class="token class-name">JpegDirectory</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>jpgDirectory <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            photo<span class="token punctuation">.</span><span class="token function">setHeight</span><span class="token punctuation">(</span>jpgDirectory<span class="token punctuation">.</span><span class="token function">getImageHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            photo<span class="token punctuation">.</span><span class="token function">setWidth</span><span class="token punctuation">(</span>jpgDirectory<span class="token punctuation">.</span><span class="token function">getImageWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> photo<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span></code></pre><p>Since you&#x27;re extracting the information, you can remove the fields from the UI and tests so the user cannot set these values.</p><p>In <code class="language-js">src<span class="token operator">/</span>main<span class="token operator">/</span>webapp<span class="token operator">/</span>app<span class="token operator">/</span>entities<span class="token operator">/</span>photo<span class="token operator">/</span>photo<span class="token operator">-</span>update<span class="token punctuation">.</span>tsx</code>, hide the metadata so users can&#x27;t edit it. Rather than displaying the <code class="language-js">height</code>, <code class="language-js">width</code>, <code class="language-js">taken</code>, and <code class="language-js">uploaded</code> values, hide them. You can do this by searching for <code class="language-js">photo<span class="token operator">-</span>height</code>, grabbing the elements (and its following three elements), and adding them to a <code class="language-js">metadata</code> constant just after <code class="language-js"><span class="token function">defaultValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> lambda function.</p><pre><code>const defaultValues = () =&gt;
  ...

const metadata = (
  &lt;div&gt;
    &lt;ValidatedField label={translate(&#x27;flickr2App.photo.height&#x27;)} id=&quot;photo-height&quot; name=&quot;height&quot; data-cy=&quot;height&quot; type=&quot;text&quot; /&gt;
    &lt;ValidatedField label={translate(&#x27;flickr2App.photo.width&#x27;)} id=&quot;photo-width&quot; name=&quot;width&quot; data-cy=&quot;width&quot; type=&quot;text&quot; /&gt;
    &lt;ValidatedField
      label={translate(&#x27;flickr2App.photo.taken&#x27;)}
      id=&quot;photo-taken&quot;
      name=&quot;taken&quot;
      data-cy=&quot;taken&quot;
      type=&quot;datetime-local&quot;
      placeholder=&quot;YYYY-MM-DD HH:mm&quot;
    /&gt;
    &lt;ValidatedField
      label={translate(&#x27;flickr2App.photo.uploaded&#x27;)}
      id=&quot;photo-uploaded&quot;
      name=&quot;uploaded&quot;
      data-cy=&quot;uploaded&quot;
      type=&quot;datetime-local&quot;
      placeholder=&quot;YYYY-MM-DD HH:mm&quot;
    /&gt;
  &lt;/div&gt;
);
const metadataRows = isNew ? &#x27;&#x27; : metadata;

return ( ... );</code></pre><p>Then, in the <code class="language-js"><span class="token keyword">return</span></code> block, remove the JSX between the <code class="language-js">image</code> property and <code class="language-js">album</code> property and replace it with <code class="language-js"><span class="token punctuation">{</span>metadataRows<span class="token punctuation">}</span></code>.</p><pre><code>&lt;ValidatedBlobField
  label={translate(&#x27;flickr2App.photo.image&#x27;)}
  id=&quot;photo-image&quot;
  name=&quot;image&quot;
  data-cy=&quot;image&quot;
  isImage
  accept=&quot;image/*&quot;
  validate={{
    required: { value: true, message: translate(&#x27;entity.validation.required&#x27;) },
  }}
/&gt;
{metadataRows}
&lt;ValidatedField id=&quot;photo-album&quot; name=&quot;albumId&quot; data-cy=&quot;album&quot; label={translate(&#x27;flickr2App.photo.album&#x27;)} type=&quot;select&quot;&gt;
  &lt;option value=&quot;&quot; key=&quot;0&quot; /&gt;
  {albums
    ? albums.map(otherEntity =&gt; (
      &lt;option value={otherEntity.id} key={otherEntity.id}&gt;
        {otherEntity.title}
      &lt;/option&gt;
    ))
    : null}
&lt;/ValidatedField&gt;</code></pre><p>In <code class="language-js">src<span class="token operator">/</span>test<span class="token operator">/</span>javascript<span class="token operator">/</span>cypress<span class="token operator">/</span>integration<span class="token operator">/</span>entity<span class="token operator">/</span>photo<span class="token punctuation">.</span>spec<span class="token punctuation">.</span>ts</code>, remove the code that sets the data in these fields:</p><pre><code class="language-ts">cy<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[data-cy="height"]</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">type</span><span class="token punctuation">(</span><span class="token string">'99459'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">'have.value'</span><span class="token punctuation">,</span> <span class="token string">'99459'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cy<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[data-cy="width"]</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">type</span><span class="token punctuation">(</span><span class="token string">'61514'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">'have.value'</span><span class="token punctuation">,</span> <span class="token string">'61514'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cy<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[data-cy="taken"]</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">type</span><span class="token punctuation">(</span><span class="token string">'2021-10-11T16:46'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">'have.value'</span><span class="token punctuation">,</span> <span class="token string">'2021-10-11T16:46'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
cy<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">[data-cy="uploaded"]</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">type</span><span class="token punctuation">(</span><span class="token string">'2021-10-11T15:23'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">should</span><span class="token punctuation">(</span><span class="token string">'have.value'</span><span class="token punctuation">,</span> <span class="token string">'2021-10-11T15:23'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Stop your Maven process, run <code class="language-js">source <span class="token punctuation">.</span>auth0<span class="token punctuation">.</span>env</code>, then <code class="language-js"><span class="token punctuation">.</span><span class="token operator">/</span>mvnw</code> again. Open a new terminal window, set your Auth0 credentials, and run <code class="language-js">npm run e2e</code> to make sure everything still works. </p><pre><code class="language-shell"><span class="token builtin class-name">export</span> <span class="token assign-left variable">CYPRESS_E2E_USERNAME</span><span class="token operator">=</span><span class="token operator">&lt;</span>auth0-username<span class="token operator">></span>
<span class="token builtin class-name">export</span> <span class="token assign-left variable">CYPRESS_E2E_PASSWORD</span><span class="token operator">=</span><span class="token operator">&lt;</span>auth0-password<span class="token operator">></span>
<span class="token function">npm</span> run e2e</code></pre><p>ℹ️ <strong>NOTE</strong>: If you experience authentication errors in your Cypress tests, it&#x27;s likely because you&#x27;ve violated Auth0&#x27;s <a href="https://auth0.com/docs/support/policies/rate-limit-policy" target="_blank" rel="noreferrer noopener">Rate Limit Policy</a>. As a workaround, I recommend you use Keycloak for Cypress tests. You can do this by opening a new terminal window and starting your app there using <code class="language-js"><span class="token punctuation">.</span><span class="token operator">/</span>mvnw</code>. Then, open a second terminal window and run <code class="language-js">npm run e2e</code>.  </p><p>If you upload an image you took with your smartphone, the height, width, and taken values should all be populated. If they&#x27;re not, chances are your image doesn&#x27;t have the data in it.</p><blockquote><p>Need some sample photos with EXIF data? You can download pictures of my 1966 VW Bus from <a href="https://www.flickr.com/photos/mraible/albums/72157689027458320" target="_blank" rel="noreferrer noopener">an album on Flickr</a>.</p></blockquote><h2 id="Add-a-React-Photo-Gallery">Add a React Photo Gallery</h2><p>You&#x27;ve added metadata extraction to your backend, but your photos still display in a list rather than in a grid (like Flickr). To fix that, you can use the <a href="https://github.com/neptunian/react-photo-gallery" target="_blank" rel="noreferrer noopener">React Photo Gallery</a> component. Install it using npm:</p><pre><code class="language-bash"><span class="token function">npm</span> i react-photo-gallery@8 --force</code></pre><p>In <code class="language-js">src<span class="token operator">/</span>main<span class="token operator">/</span>webapp<span class="token operator">/</span>app<span class="token operator">/</span>entities<span class="token operator">/</span>photo<span class="token operator">/</span>photo<span class="token punctuation">.</span>tsx</code>, add an import for <code class="language-js">Gallery</code>:</p><pre><code class="language-ts"><span class="token keyword">import</span> Gallery <span class="token keyword">from</span> <span class="token string">'react-photo-gallery'</span><span class="token punctuation">;</span></code></pre><p>Then add the following just after <code class="language-js"><span class="token keyword">const</span> <span class="token punctuation">{</span> match <span class="token punctuation">}</span> <span class="token operator">=</span> props<span class="token punctuation">;</span></code>. This adds the photos to a set with source, height, and width information.</p><pre><code class="language-ts"><span class="token keyword">const</span> photoSet <span class="token operator">=</span> photoList<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>photo <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">{</span>
  src<span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">data:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>photo<span class="token punctuation">.</span>imageContentType<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;base64,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>photo<span class="token punctuation">.</span>image<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">,</span>
  width<span class="token operator">:</span> photo<span class="token punctuation">.</span>height <span class="token operator">></span> photo<span class="token punctuation">.</span>width <span class="token operator">?</span> <span class="token number">3</span> <span class="token operator">:</span> photo<span class="token punctuation">.</span>height <span class="token operator">===</span> photo<span class="token punctuation">.</span>width <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>
  height<span class="token operator">:</span> photo<span class="token punctuation">.</span>height <span class="token operator">></span> photo<span class="token punctuation">.</span>width <span class="token operator">?</span> <span class="token number">4</span> <span class="token operator">:</span> photo<span class="token punctuation">.</span>height <span class="token operator">===</span> photo<span class="token punctuation">.</span>width <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">3</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>Next, add a <code class="language-js"><span class="token operator">&lt;</span>Gallery<span class="token operator">></span></code> component right after the closing <code class="language-js"><span class="token operator">&lt;</span><span class="token operator">/</span>h2<span class="token operator">></span></code>.</p><pre><code>return (
  &lt;div&gt;
    &lt;h2 id=&quot;photo-heading&quot; data-cy=&quot;PhotoHeading&quot;&gt;
      ...
    &lt;/h2&gt;
    &lt;Gallery photos={photoSet} /&gt;
    ...
);</code></pre><p>Save all your changes and restart your app.</p><pre><code class="language-shell"><span class="token builtin class-name">source</span> .auth0.env
./mvnw</code></pre><p>Log in and navigate to <strong>Entities</strong> &gt; <strong>Photo</strong> in the top nav bar. You will see a plethora of photos loaded by <a href="https://www.liquibase.org/" target="_blank" rel="noreferrer noopener">Liquibase</a> and <a href="https://marak.github.io/faker.js/" target="_blank" rel="noreferrer noopener">faker.js</a>. To make a clean screenshot without this data, I modified <code class="language-js">src<span class="token operator">/</span>main<span class="token operator">/</span>resources<span class="token operator">/</span>config<span class="token operator">/</span>application<span class="token operator">-</span>dev<span class="token punctuation">.</span>yml</code> to remove the &quot;faker&quot; context for Liquibase.</p><pre><code class="language-yaml"><span class="token key atrule">liquibase</span><span class="token punctuation">:</span>
  <span class="token comment"># Append ', faker' to the line below if you want sample data to be loaded automatically</span>
  <span class="token key atrule">contexts</span><span class="token punctuation">:</span> dev</code></pre><p>Stop your Spring Boot backend and run <code class="language-js">rm <span class="token operator">-</span>r target<span class="token operator">/</span>h2db</code> to clear out your database (or just delete the <code class="language-js">target<span class="token operator">/</span>h2db</code> directory). Restart your backend.</p><p>Now you should be able to upload photos and see the results in a nice grid at the top of the list.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/6RIASq72N4JN9b3ya5UVra/c0530addbbf28020d1a42f6b18ea0bae/08_photo-gallery.jpg" alt="Gallery with Photos" class=" lightbox-image"/></p><p>You can also add a &quot;lightbox&quot; feature to the grid so you can click on photos and zoom in. The <a href="https://neptunian.github.io/react-photo-gallery/" target="_blank" rel="noreferrer noopener">React Photo Gallery docs</a> shows how to do this. I&#x27;ve integrated it into the example for this post, but I won&#x27;t show the code here for the sake of brevity. You can see the <a href="https://github.com/oktadev/auth0-full-stack-java-example/blob/main/src/main/webapp/app/entities/photo/photo.tsx" target="_blank" rel="noreferrer noopener">final <code class="language-js">photo<span class="token punctuation">.</span>tsx</code> with Lightbox added on GitHub</a> or a <a href="https://github.com/oktadev/auth0-full-stack-java-example/commit/76dcf711816cb2f3455ba4b46264bf48002487f7" target="_blank" rel="noreferrer noopener">diff of the necessary changes</a>.</p><h2 id="Make-Your-Full-Stack-Java-App-Into-a-PWA">Make Your Full Stack Java App Into a PWA</h2><p>Progressive Web Apps, aka PWAs, are the best way for developers to make their webapps load faster and more performant. In a nutshell, PWAs are websites that use recent web standards to allow for installation on a user&#x27;s computer or device and deliver an app-like experience to those users. To make a web app into a PWA:</p><ol start="1"><li>Your app must be served over HTTPS</li><li>Your app must register a service worker so it can cache requests and work offline</li><li>Your app must have a webapp manifest with installation information and icons</li></ol><p>For HTTPS, you can <a href="https://letsencrypt.org/docs/certificates-for-localhost/" target="_blank" rel="noreferrer noopener">set up a certificate for localhost</a> or (even better), deploy it to production! Cloud providers like Heroku will provide you with HTTPS out-of-the-box, but they won&#x27;t <em>force</em> HTTPS. To force HTTPS, open <code class="language-js">src<span class="token operator">/</span>main<span class="token operator">/</span>java<span class="token operator">/</span>com<span class="token operator">/</span>auth0<span class="token operator">/</span>flickr2<span class="token operator">/</span>config<span class="token operator">/</span>SecurityConfiguration<span class="token punctuation">.</span>java</code> and add a rule to force a secure channel when an <code class="language-js"><span class="token constant">X</span><span class="token operator">-</span>Forwarded<span class="token operator">-</span>Proto</code> header is sent.</p><pre><code class="language-java"><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">HttpSecurity</span> http<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    http
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">frameOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">deny</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">requiresChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">requestMatchers</span><span class="token punctuation">(</span>r <span class="token operator">-></span> r<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"X-Forwarded-Proto"</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">requiresSecure</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">and</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">authorizeRequests</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span></code></pre><p>The <a href="https://developers.google.com/web/tools/workbox/modules/workbox-webpack-plugin" target="_blank" rel="noreferrer noopener">workbox-webpack-plugin</a> is configured already for generating a service worker, but it only works when running your app with a production profile. This is nice because it means your data isn&#x27;t cached in the browser when you&#x27;re developing.</p><p>To register a service worker, open <code class="language-js">src<span class="token operator">/</span>main<span class="token operator">/</span>webapp<span class="token operator">/</span>index<span class="token punctuation">.</span>html</code> and uncomment the following block of code.</p><pre><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token string">'serviceWorker'</span> <span class="token keyword">in</span> navigator<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    window<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'load'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      navigator<span class="token punctuation">.</span>serviceWorker<span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token string">'/service-worker.js'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Service Worker Registered'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>The final feature — a webapp manifest — is included at <code class="language-js">src<span class="token operator">/</span>main<span class="token operator">/</span>webapp<span class="token operator">/</span>manifest<span class="token punctuation">.</span>webapp</code>. It defines an app name, colors, and icons. You might want to adjust these to fit your app.</p><h2 id="Deploy-Your-React---Spring-Boot-App-to-Heroku">Deploy Your React + Spring Boot App to Heroku</h2><p>To deploy your app to Heroku, you&#x27;ll first need to install the <a href="https://devcenter.heroku.com/articles/heroku-cli" target="_blank" rel="noreferrer noopener">Heroku CLI</a>. You can confirm it&#x27;s installed by running <code class="language-js">heroku <span class="token operator">--</span>version</code>.</p><blockquote><p>If you don&#x27;t have a Heroku account, go to <a href="https://www.heroku.com/" target="_blank" rel="noreferrer noopener">heroku.com</a> and sign up. Don&#x27;t worry, it&#x27;s free, and chances are you&#x27;ll love the experience.</p></blockquote><p>Run <code class="language-js">heroku login</code> to log in to your account, then start the deployment process with JHipster:</p><pre><code class="language-js">jhipster heroku</code></pre><p>This will start the <a href="https://www.jhipster.tech/heroku/" target="_blank" rel="noreferrer noopener">Heroku sub-generator</a> that asks you a couple of questions about your app: what you want to name it and whether you want to deploy it to a US region or EU. Then it&#x27;ll prompt you to choose between building locally or with Git on Heroku&#x27;s servers. Choose Git, so you don&#x27;t have to upload a fat JAR. When prompted to use Okta for OIDC, select <code class="language-js">No</code>. Then, the deployment process will begin.</p><p>You&#x27;ll be prompted to overwrite <code class="language-js">pom<span class="token punctuation">.</span>xml</code>—type <code class="language-js">a</code> to allow overwriting all files.</p><p>If you have a stable and fast internet connection, your app should be live on the internet in around six minutes!</p><pre><code class="language-js">remote<span class="token operator">:</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span> Compressing<span class="token operator">...</span>
remote<span class="token operator">:</span>        Done<span class="token operator">:</span> <span class="token number">120.9</span>M
remote<span class="token operator">:</span> <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span> Launching<span class="token operator">...</span>
remote<span class="token operator">:</span>        Released v7
remote<span class="token operator">:</span>        https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>flickr<span class="token operator">-</span><span class="token number">2.</span>herokuapp<span class="token punctuation">.</span>com<span class="token operator">/</span> deployed to Heroku
remote<span class="token operator">:</span>
remote<span class="token operator">:</span> Verifying deploy<span class="token operator">...</span> done<span class="token punctuation">.</span>

To https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>git<span class="token punctuation">.</span>heroku<span class="token punctuation">.</span>com<span class="token operator">/</span>flickr<span class="token operator">-</span><span class="token number">2.</span>git
 <span class="token operator">*</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">branch</span><span class="token punctuation">]</span>      <span class="token constant">HEAD</span> <span class="token operator">-</span><span class="token operator">></span> main

Your app should now be live<span class="token punctuation">.</span> To view it<span class="token punctuation">,</span> run
    heroku open
And you can view the logs <span class="token keyword">with</span> <span class="token keyword">this</span> command
    heroku logs <span class="token operator">--</span>tail
After application modification<span class="token punctuation">,</span> redeploy it <span class="token keyword">with</span>
    jhipster heroku
Congratulations<span class="token punctuation">,</span> JHipster execution<span class="token punctuation">,</span> is complete<span class="token operator">!</span>
Sponsored <span class="token keyword">with</span> ❤️ by @oktadev<span class="token punctuation">.</span>
Execution time<span class="token operator">:</span> <span class="token number">6</span> min<span class="token punctuation">.</span> <span class="token number">19</span> s<span class="token punctuation">.</span></code></pre><h3 id="Configure-for-Auth0-and-Analyze-Your-PWA-Score-with-Lighthouse">Configure for Auth0 and Analyze Your PWA Score with Lighthouse</h3><p>To configure your app to work with Auth0 on Heroku, run the following command to set your Auth0 variables on Heroku.</p><pre><code class="language-bash">heroku config:set <span class="token punctuation">\</span>
  <span class="token assign-left variable">SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_OIDC_ISSUER_URI</span><span class="token operator">=</span><span class="token string">"https://&lt;your-auth0-domain>/"</span> <span class="token punctuation">\</span>
  <span class="token assign-left variable">SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_ID</span><span class="token operator">=</span><span class="token string">"&lt;your-client-id>"</span> <span class="token punctuation">\</span>
  <span class="token assign-left variable">SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_SECRET</span><span class="token operator">=</span><span class="token string">"&lt;your-client-secret>"</span> <span class="token punctuation">\</span>
  <span class="token assign-left variable">JHIPSTER_SECURITY_OAUTH2_AUDIENCE</span><span class="token operator">=</span><span class="token string">"https://&lt;your-auth0-domain>/api/v2/"</span></code></pre><p>Then, log in to your Auth0 account, navigate to your app, and add your Heroku URLs as valid redirect URIs:</p><ul><li>Allowed Callback URLs: <code class="language-js">https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>flickr<span class="token operator">-</span><span class="token number">2.</span>herokuapp<span class="token punctuation">.</span>com<span class="token operator">/</span>login<span class="token operator">/</span>oauth2<span class="token operator">/</span>code<span class="token operator">/</span>oidc</code></li><li>Allowed Logout URLs: <code class="language-js">https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>flickr<span class="token operator">-</span><span class="token number">2.</span>herokuapp<span class="token punctuation">.</span>com</code></li></ul><p>After Heroku restarts your app, open it with <code class="language-js">heroku open</code> and log in.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/3MDBfwDhZiuKW8uzrlm291/2c574c89ca11c7b853bf01d850f06ee9/09_app-on-heroku.png" alt="Running on Heroku!" class=" lightbox-image"/></p><p>Then, test it with <a href="https://developers.google.com/web/tools/lighthouse/" target="_blank" rel="noreferrer noopener">Lighthouse</a> (using the Lighthouse tab in Chrome developer tools). Looks pretty good, eh?! 💯</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/2udHZaYwD4vfVtTf9SrpzB/c6888183a1364142f5edca732a0ad02c/06_lighthouse-score.png" alt="Lighthouse Score 💯" class=" lightbox-image"/></p><p>It&#x27;s pretty darn secure too, at least according to <a href="https://securityheaders.com" target="_blank" rel="noreferrer noopener">securityheaders.com</a>.</p><p><img src="https://images.ctfassets.net/23aumh6u8s0i/Y1O0MLjbMSojaSH1UOnuN/48d36a1abdb9007c0dfa2a45bd61057e/09_security-headers.png" alt="Security Headers on Heroku" class=" lightbox-image"/></p><h2 id="Learn-More-About-Full-Stack-Java-Development">Learn More About Full Stack Java Development</h2><p>This tutorial shows you how to streamline full-stack Java development with JHipster. You developed a working application with a React frontend and a Spring Boot backend. You can find the app created in this tutorial on GitHub, in the <a href="https://github.com/oktadev/auth0-full-stack-java-example" target="_blank" rel="noreferrer noopener">auth0-full-stack-java-example</a> repository.</p><p>You might also enjoy these related blog posts:</p><ul><li><a href="/blog/2018/12/11/learning-java-first-language" target="_blank" rel="noreferrer noopener">Learning Java as a First Language</a></li><li><a href="/blog/2021/01/20/reactive-java-microservices" target="_blank" rel="noreferrer noopener">Reactive Java Microservices with Spring Boot and JHipster</a></li><li><a href="https://auth0.com/blog/build-and-secure-an-api-with-spring-boot/" target="_blank" rel="noreferrer noopener">Build and Secure an API with Spring Boot and Kotlin</a></li><li><a href="https://auth0.com/blog/complete-guide-to-react-user-authentication/" target="_blank" rel="noreferrer noopener">The Complete Guide to React User Authentication with Auth0</a></li></ul><p>To see when we publish more developer topics on Auth0 and the Okta developer blog, follow <a href="https://twitter.com/auth0" target="_blank" rel="noreferrer noopener">Auth0</a> and <a href="https://twitter.com/oktadev" target="_blank" rel="noreferrer noopener">OktaDev</a> on Twitter.</p></div><ul class="nlufiy-1 dOMuZW"><li class="nlufiy-2 fXIXML"><a href="#" class="nlufiy-3 jFCgAB"><img src="https://cdn.auth0.com/website/blog/twitter-social-button.svg" alt="Twitter icon"/></a></li><li class="nlufiy-2 fXIXML"><a href="#" class="nlufiy-3 jRHWVS"><img src="https://cdn.auth0.com/website/blog/linkedin-social-button.svg" alt="LinkedIn icon"/></a></li><li class="nlufiy-2 fXIXML"><a href="#" class="nlufiy-3 dCgmko"><img src="https://cdn.auth0.com/website/blog/facebook-social-button.svg" alt="Faceboook icon"/></a></li></ul></div></article><div itemscope="" itemType="https://schema.org/Organization" itemProp="publisher"><div itemProp="logo" itemscope="" itemType="https://schema.org/ImageObject"><meta itemProp="url" content="https://i.cloudup.com/BngR4GufYd-3000x3000.png"/><meta itemProp="width" content="100"/><meta itemProp="height" content="37"/></div><meta itemProp="name" content="Auth0"/></div></section><aside class="v0njjd-2 eOJQKq"><section itemscope="" itemType="http://schema.org/Person" itemProp="author" class="afpbj5-0 lhZmdi"><article class="afpbj5-1 jUlrnr"><div class="afpbj5-2 kKffdm"><img src="https://images.ctfassets.net/23aumh6u8s0i/1ciaQDb4CM5f7DxRX8gqUG/9d23ca769683d021a01d4702a2e4ffad/matt-raible.jpeg" width="400" height="400" alt="Matt Raible" class="afpbj5-3 fTfQKv"/><div class="afpbj5-4 gnZRGE"><h3 itemProp="name" class="afpbj5-5 hKELzO">Matt Raible</h3><p itemProp="jobTitle" class="afpbj5-6 kXpFsO">Developer Advocate at Okta</p><div class="afpbj5-7 beRytG"><span>Matt Raible is a well-known figure in the Java community and has been building web applications for most of his adult life. For over 20 years, he has helped developers learn and adopt open source frameworks and use them effectively. He&#x27;s a web developer, Java Champion, and Developer Advocate at Okta. Matt is a frequent contributor to open source and a big fan of Java, IntelliJ, TypeScript, Angular, and Spring Boot. </span></div><a href="/blog/authors/matt-raible/" class="afpbj5-8 gtgUdW">View Profile</a></div></div><div class="afpbj5-9 iDyHSd"><div class="afpbj5-4 gnZRGE"><div class="afpbj5-10 iKBEzH"><img src="https://images.ctfassets.net/23aumh6u8s0i/1ciaQDb4CM5f7DxRX8gqUG/9d23ca769683d021a01d4702a2e4ffad/matt-raible.jpeg" class="afpbj5-3 fTfQKv"/><div class="afpbj5-11 IuaRy"><h3 class="afpbj5-5 hKELzO">Matt Raible</h3><p class="afpbj5-6 kXpFsO">Developer Advocate at Okta</p></div></div><div class="afpbj5-7 beRytG"><span>Matt Raible is a well-known figure in the Java community and has been building web applications for most of his adult life. For over 20 years, he has helped developers learn and adopt open source frameworks and use them effectively. He&#x27;s a web developer, Java Champion, and Developer Advocate at Okta. Matt is a frequent contributor to open source and a big fan of Java, IntelliJ, TypeScript, Angular, and Spring Boot. </span></div><a href="/blog/authors/matt-raible/" class="afpbj5-8 gtgUdW">View Profile</a></div></div></article></section><section class="eb4tqf-0 cUeJxc"><article class="eb4tqf-1 eeCWwh"><h3 class="eb4tqf-2 eHrQny">More like this</h3><ul class="eb4tqf-3 eRFpcL"><li data-element-id="blog-bottom-recommendation" class="sc-1t3ptg8-2 SwmLi"><a href="/blog/spring-boot-logs-aggregation-and-monitoring-using-elk-stack/" class="sc-1t3ptg8-4 hZxZfg"><figure class="sc-1t3ptg8-5 eGlzbU"></figure><div class="sc-1t3ptg8-6 edDGSP"><span color="E5AF44" class="sc-1t3ptg8-7 ikuijq">Spring Boot</span><h2 class="sc-1t3ptg8-8 jVGonE">Spring Boot Logs Aggregation and Monitoring Using ELK Stack</h2></div></a></li><li data-element-id="blog-bottom-recommendation" class="sc-1t3ptg8-2 SwmLi"><a href="/blog/get-started-with-custom-error-handling-in-spring-boot-java/" class="sc-1t3ptg8-4 hZxZfg"><figure class="sc-1t3ptg8-5 gSaCXw"></figure><div class="sc-1t3ptg8-6 edDGSP"><span color="E5AF44" class="sc-1t3ptg8-7 ikuijq">Spring Boot</span><h2 class="sc-1t3ptg8-8 jVGonE">Get Started with Custom Error Handling in Spring Boot (Java)</h2></div></a></li><li data-element-id="blog-bottom-recommendation" class="sc-1t3ptg8-2 SwmLi"><a href="/blog/spring-cloud-messaging-with-aws-and-localstack/" class="sc-1t3ptg8-4 hZxZfg"><figure class="sc-1t3ptg8-5 dtDwd"></figure><div class="sc-1t3ptg8-6 edDGSP"><span color="E5AF44" class="sc-1t3ptg8-7 ikuijq">Spring</span><h2 class="sc-1t3ptg8-8 jVGonE">Spring Cloud Messaging With AWS and LocalStack</h2></div></a></li></ul></article></section><section class="fr3dgj-0 wgbeZ"><article class="fr3dgj-1 dGWFvT"><div class="fr3dgj-2 ejdPpM"><h3 class="fr3dgj-3 ftCbBx">Follow the conversation</h3><div class="fr3dgj-4 fJKZGu"><img src="https://cdn.auth0.com/website/blog/chevron-up.svg" alt="chevron up icon" class="fr3dgj-5 gUjlSf"/></div></div><div class="fr3dgj-6"><p class="fr3dgj-7 iGOHXJ">Powered by the Auth0 Community.<!-- --> <a href="https://community.auth0.com/signup?_ga=2.147040754.456996805.1607939208-671077045.1587410612" class="fr3dgj-10 ddqoCH">Sign up</a> <!-- -->now to join the discussion.<!-- --> <strong class="fr3dgj-11 gBETVu">Community links will open in a new window.</strong></p><div id="discourse-comments" class="fr3dgj-8 kCebOy"></div><script>
  DiscourseEmbed = {
    discourseUrl: 'https://community.auth0.com/',
    topicId: 72576,
  };

  (function() {
    var d = document.createElement('script'); d.type = 'text/javascript'; d.async = true;
    d.src = DiscourseEmbed.discourseUrl + 'javascripts/embed.js';
    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(d);
  })();
</script></div></article></section></aside></div><footer class="se2h2f-0 cKkxOM"><section class="sc-1cjm8t9-0 kFxyKJ"><div class="sc-1cjm8t9-1 hCUaZa"><div class="sc-1cjm8t9-2 eqalMj"><h2 class="sc-1cjm8t9-3 jqjLnD">Secure access for everyone. But not just anyone.</h2></div><div class="sc-1cjm8t9-4 dyFOzi"><a href="/signup?&amp;signUpData=%7B%22category%22%3A%22button%22%7D" class="sc-1cjm8t9-6 jLIrRp">Try Auth0 for Free</a><button class="sc-1cjm8t9-5 sc-1cjm8t9-7 eYcLwW iMBUpK">Talk to Sales</button></div></div></section><section class="se2h2f-1 dVGqDZ"><article class="se2h2f-2 eRDypO"><ul class="se2h2f-3 daVBxX"><li class="se2h2f-4 frYIIS"><h3 class="se2h2f-5 hYwhOd">Blog</h3><p class="se2h2f-6 pJMTk"><a href="/blog/developers/" class="se2h2f-7 kfPipf">Developers</a></p><p class="se2h2f-6 pJMTk"><a href="/blog/identity-and-security/" class="se2h2f-7 kfPipf">Identity &amp; Security</a></p><p class="se2h2f-6 pJMTk"><a href="/blog/business/" class="se2h2f-7 kfPipf">Business</a></p><p class="se2h2f-6 pJMTk"><a href="/blog/leadership/" class="se2h2f-7 kfPipf">Leadership</a></p><p class="se2h2f-6 pJMTk"><a href="/blog/culture/" class="se2h2f-7 kfPipf">Culture</a></p><p class="se2h2f-6 pJMTk"><a href="/blog/engineering/" class="se2h2f-7 kfPipf">Engineering</a></p><p class="se2h2f-6 pJMTk"><a href="/blog/announcements/" class="se2h2f-7 kfPipf">Announcements</a></p></li><li class="se2h2f-4 frYIIS"><h3 class="se2h2f-5 hYwhOd">Company</h3><p class="se2h2f-6 pJMTk"><a href="https://auth0.com/about" class="se2h2f-7 kfPipf">About Us</a></p><p class="se2h2f-6 pJMTk"><a href="https://auth0.com/customers/" class="se2h2f-7 kfPipf">Customers</a></p><p class="se2h2f-6 pJMTk"><a href="https://auth0.com/security" class="se2h2f-7 kfPipf">Security</a></p><p class="se2h2f-6 pJMTk"><a href="https://auth0.com/careers/" class="se2h2f-7 kfPipf">Careers</a></p><p class="se2h2f-6 pJMTk"><a href="https://auth0.com/partners" class="se2h2f-7 kfPipf">Partners</a></p><p class="se2h2f-6 pJMTk"><a href="https://auth0.com/press" class="se2h2f-7 kfPipf">Press</a></p><p class="se2h2f-6 pJMTk"><a href="https://status.auth0.com" class="se2h2f-7 kfPipf">Status</a></p><p class="se2h2f-6 pJMTk"><a href="https://www.okta.com/agreements/" class="se2h2f-7 kfPipf">Legal</a></p><p class="se2h2f-6 pJMTk"><a href="https://auth0.com/privacy" class="se2h2f-7 kfPipf">Privacy Policy</a></p><p class="se2h2f-6 pJMTk"><a href="https://auth0.com/web-terms" class="se2h2f-7 kfPipf">Terms</a></p><p class="se2h2f-6 pJMTk"><a href="https://auth0.com/your-privacy-choices" class="se2h2f-7 kfPipf">Your Privacy Choices</a><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 30 14" class="se2h2f-20 gtkBJS"><path d="M7.4 12.8h6.8l3.1-11.6H7.4C4.2 1.2 1.6 3.8 1.6 7s2.6 5.8 5.8 5.8z" fill-rule="evenodd" clip-rule="evenodd" fill="#fff"></path><path d="M22.6 0H7.4c-3.9 0-7 3.1-7 7s3.1 7 7 7h15.2c3.9 0 7-3.1 7-7s-3.2-7-7-7zm-21 7c0-3.2 2.6-5.8 5.8-5.8h9.9l-3.1 11.6H7.4c-3.2 0-5.8-2.6-5.8-5.8z" fill-rule="evenodd" clip-rule="evenodd" fill="#06f"></path><path d="M24.6 4c.2.2.2.6 0 .8L22.5 7l2.2 2.2c.2.2.2.6 0 .8-.2.2-.6.2-.8 0l-2.2-2.2-2.2 2.2c-.2.2-.6.2-.8 0-.2-.2-.2-.6 0-.8L20.8 7l-2.2-2.2c-.2-.2-.2-.6 0-.8.2-.2.6-.2.8 0l2.2 2.2L23.8 4c.2-.2.6-.2.8 0z" fill="#fff"></path><path d="M12.7 4.1c.2.2.3.6.1.8L8.6 9.8c-.1.1-.2.2-.3.2-.2.1-.5.1-.7-.1L5.4 7.7c-.2-.2-.2-.6 0-.8.2-.2.6-.2.8 0L8 8.6l3.8-4.5c.2-.2.6-.2.9 0z" fill="#06f"></path></svg></p></li><li class="se2h2f-4 frYIIS"><h3 class="se2h2f-5 hYwhOd">Product</h3><p class="se2h2f-6 pJMTk"><a href="https://auth0.com/single-sign-on/" class="se2h2f-7 kfPipf">Single Sign-On</a></p><p class="se2h2f-6 pJMTk"><a href="https://auth0.com/breached-passwords" class="se2h2f-7 kfPipf">Password Detection</a></p><p class="se2h2f-6 pJMTk"><a href="https://auth0.com/multifactor-authentication" class="se2h2f-7 kfPipf">Guardian</a></p><p class="se2h2f-6 pJMTk"><a href="https://auth0.com/machine-to-machine/" class="se2h2f-7 kfPipf">M2M</a></p><p class="se2h2f-6 pJMTk"><a href="https://auth0.com/universal-login/" class="se2h2f-7 kfPipf">Universal Login</a></p><p class="se2h2f-6 pJMTk"><a href="https://auth0.com/passwordless/" class="se2h2f-7 kfPipf">Passwordless</a></p></li><li class="se2h2f-4 frYIIS"><h3 class="se2h2f-5 hYwhOd">More</h3><p class="se2h2f-6 pJMTk"><a href="https://auth0.com" target="_blank" rel="noopener noreferrer" class="se2h2f-7 kfPipf">Auth0.com<img alt="Open external link" src="https://cdn.auth0.com/website/blog/external-link.svg" class="se2h2f-14 kUlUxE"/></a></p><p class="se2h2f-6 pJMTk"><a href="https://auth0.com/ambassador-program/" target="_blank" rel="noopener noreferrer" class="se2h2f-7 kfPipf">Ambassador Program<img alt="Open external link" src="https://cdn.auth0.com/website/blog/external-link.svg" class="se2h2f-14 kUlUxE"/></a></p><p class="se2h2f-6 pJMTk"><a href="https://auth0.com/guest-authors/" target="_blank" rel="noopener noreferrer" class="se2h2f-7 kfPipf">Guest Author Program<img alt="Open external link" src="https://cdn.auth0.com/website/blog/external-link.svg" class="se2h2f-14 kUlUxE"/></a></p><p class="se2h2f-6 pJMTk"><a href="https://community.auth0.com" target="_blank" rel="noopener noreferrer" class="se2h2f-7 kfPipf">Auth0 Community<img alt="Open external link" src="https://cdn.auth0.com/website/blog/external-link.svg" class="se2h2f-14 kUlUxE"/></a></p><p class="se2h2f-6 pJMTk"><a href="https://auth0.com/learn/" target="_blank" rel="noopener noreferrer" class="se2h2f-7 kfPipf">Resources<img alt="Open external link" src="https://cdn.auth0.com/website/blog/external-link.svg" class="se2h2f-14 kUlUxE"/></a></p></li></ul><hr class="se2h2f-8 gplNEi"/><div class="se2h2f-9 gBMQRB"><ul class="se2h2f-10 dHEfNl"><li class="se2h2f-11 gKhDpQ"><a href="https://twitter.com/auth0" target="_blank" rel="noopener noreferrer" class="se2h2f-12 gXAHYn"><svg aria-hidden="true" class="se2h2f-19 eNRqGo" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="currentColor" d="M459.37 151.716c.325 4.548.325 9.097.325 13.645 0 138.72-105.583 298.558-298.558 298.558-59.452 0-114.68-17.219-161.137-47.106 8.447.974 16.568 1.299 25.34 1.299 49.055 0 94.213-16.568 130.274-44.832-46.132-.975-84.792-31.188-98.112-72.772 6.498.974 12.995 1.624 19.818 1.624 9.421 0 18.843-1.3 27.614-3.573-48.081-9.747-84.143-51.98-84.143-102.985v-1.299c13.969 7.797 30.214 12.67 47.431 13.319-28.264-18.843-46.781-51.005-46.781-87.391 0-19.492 5.197-37.36 14.294-52.954 51.655 63.675 129.3 105.258 216.365 109.807-1.624-7.797-2.599-15.918-2.599-24.04 0-57.828 46.782-104.934 104.934-104.934 30.213 0 57.502 12.67 76.67 33.137 23.715-4.548 46.456-13.32 66.599-25.34-7.798 24.366-24.366 44.833-46.132 57.827 21.117-2.273 41.584-8.122 60.426-16.243-14.292 20.791-32.161 39.308-52.628 54.253z"></path></svg></a></li><li class="se2h2f-11 gKhDpQ"><a href="https://facebook.com/getauth0" target="_blank" rel="noopener noreferrer" class="se2h2f-12 gXAHYn"><svg aria-hidden="true" class="se2h2f-15 VdjZw" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 320 512"><path fill="currentColor" d="M279.14 288l14.22-92.66h-88.91v-60.13c0-25.35 12.42-50.06 52.24-50.06h40.42V6.26S260.43 0 225.36 0c-73.22 0-121.08 44.38-121.08 124.72v70.62H22.89V288h81.39v224h100.17V288z"></path></svg></a></li><li class="se2h2f-11 gKhDpQ"><a href="https://linkedin.com/company/auth0" target="_blank" rel="noopener noreferrer" class="se2h2f-12 gXAHYn"><svg aria-hidden="true" class="se2h2f-18 bLnTdJ" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path fill="currentColor" d="M416 32H31.9C14.3 32 0 46.5 0 64.3v383.4C0 465.5 14.3 480 31.9 480H416c17.6 0 32-14.5 32-32.3V64.3c0-17.8-14.4-32.3-32-32.3zM135.4 416H69V202.2h66.5V416zm-33.2-243c-21.3 0-38.5-17.3-38.5-38.5S80.9 96 102.2 96c21.2 0 38.5 17.3 38.5 38.5 0 21.3-17.2 38.5-38.5 38.5zm282.1 243h-66.4V312c0-24.8-.5-56.7-34.5-56.7-34.6 0-39.9 27-39.9 54.9V416h-66.4V202.2h63.7v29.2h.9c8.9-16.8 30.6-34.5 62.9-34.5 67.2 0 79.7 44.3 79.7 101.9V416z"></path></svg></a></li><li class="se2h2f-11 gKhDpQ"><a href="https://www.instagram.com/weareauth0/" target="_blank" rel="noopener noreferrer" class="se2h2f-12 gXAHYn"><svg aria-hidden="true" class="se2h2f-17 ekZMky" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path fill="currentColor" d="M224.1 141c-63.6 0-114.9 51.3-114.9 114.9s51.3 114.9 114.9 114.9S339 319.5 339 255.9 287.7 141 224.1 141zm0 189.6c-41.1 0-74.7-33.5-74.7-74.7s33.5-74.7 74.7-74.7 74.7 33.5 74.7 74.7-33.6 74.7-74.7 74.7zm146.4-194.3c0 14.9-12 26.8-26.8 26.8-14.9 0-26.8-12-26.8-26.8s12-26.8 26.8-26.8 26.8 12 26.8 26.8zm76.1 27.2c-1.7-35.9-9.9-67.7-36.2-93.9-26.2-26.2-58-34.4-93.9-36.2-37-2.1-147.9-2.1-184.9 0-35.8 1.7-67.6 9.9-93.9 36.1s-34.4 58-36.2 93.9c-2.1 37-2.1 147.9 0 184.9 1.7 35.9 9.9 67.7 36.2 93.9s58 34.4 93.9 36.2c37 2.1 147.9 2.1 184.9 0 35.9-1.7 67.7-9.9 93.9-36.2 26.2-26.2 34.4-58 36.2-93.9 2.1-37 2.1-147.8 0-184.8zM398.8 388c-7.8 19.6-22.9 34.7-42.6 42.6-29.5 11.7-99.5 9-132.1 9s-102.7 2.6-132.1-9c-19.6-7.8-34.7-22.9-42.6-42.6-11.7-29.5-9-99.5-9-132.1s-2.6-102.7 9-132.1c7.8-19.6 22.9-34.7 42.6-42.6 29.5-11.7 99.5-9 132.1-9s102.7-2.6 132.1 9c19.6 7.8 34.7 22.9 42.6 42.6 11.7 29.5 9 99.5 9 132.1s2.7 102.7-9 132.1z"></path></svg></a></li><li class="se2h2f-11 gKhDpQ"><a href="https://github.com/auth0" target="_blank" rel="noopener noreferrer" class="se2h2f-12 gXAHYn"><svg aria-hidden="true" class="se2h2f-16 biwoHT" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 496 512"><path fill="currentColor" d="M165.9 397.4c0 2-2.3 3.6-5.2 3.6-3.3.3-5.6-1.3-5.6-3.6 0-2 2.3-3.6 5.2-3.6 3-.3 5.6 1.3 5.6 3.6zm-31.1-4.5c-.7 2 1.3 4.3 4.3 4.9 2.6 1 5.6 0 6.2-2s-1.3-4.3-4.3-5.2c-2.6-.7-5.5.3-6.2 2.3zm44.2-1.7c-2.9.7-4.9 2.6-4.6 4.9.3 2 2.9 3.3 5.9 2.6 2.9-.7 4.9-2.6 4.6-4.6-.3-1.9-3-3.2-5.9-2.9zM244.8 8C106.1 8 0 113.3 0 252c0 110.9 69.8 205.8 169.5 239.2 12.8 2.3 17.3-5.6 17.3-12.1 0-6.2-.3-40.4-.3-61.4 0 0-70 15-84.7-29.8 0 0-11.4-29.1-27.8-36.6 0 0-22.9-15.7 1.6-15.4 0 0 24.9 2 38.6 25.8 21.9 38.6 58.6 27.5 72.9 20.9 2.3-16 8.8-27.1 16-33.7-55.9-6.2-112.3-14.3-112.3-110.5 0-27.5 7.6-41.3 23.6-58.9-2.6-6.5-11.1-33.3 2.6-67.9 20.9-6.5 69 27 69 27 20-5.6 41.5-8.5 62.8-8.5s42.8 2.9 62.8 8.5c0 0 48.1-33.6 69-27 13.7 34.7 5.2 61.4 2.6 67.9 16 17.7 25.8 31.5 25.8 58.9 0 96.5-58.9 104.2-114.8 110.5 9.2 7.9 17 22.9 17 46.4 0 33.7-.3 75.4-.3 83.6 0 6.5 4.6 14.4 17.3 12.1C428.2 457.8 496 362.9 496 252 496 113.3 383.5 8 244.8 8zM97.2 352.9c-1.3 1-1 3.3.7 5.2 1.6 1.6 3.9 2.3 5.2 1 1.3-1 1-3.3-.7-5.2-1.6-1.6-3.9-2.3-5.2-1zm-10.8-8.1c-.7 1.3.3 2.9 2.3 3.9 1.6 1 3.6.7 4.3-.7.7-1.3-.3-2.9-2.3-3.9-2-.6-3.6-.3-4.3.7zm32.4 35.6c-1.6 1.3-1 4.3 1.3 6.2 2.3 2.3 5.2 2.6 6.5 1 1.3-1.3.7-4.3-1.3-6.2-2.2-2.3-5.2-2.6-6.5-1zm-11.4-14.7c-1.6 1-1.6 3.6 0 5.9 1.6 2.3 4.3 3.3 5.6 2.3 1.6-1.3 1.6-3.9 0-6.2-1.4-2.3-4-3.3-5.6-2z"></path></svg></a></li></ul><p class="se2h2f-13 eYYtIj">©<!-- -->2023<!-- --> Okta, Inc. All Rights Reserved.</p></div></article></section></footer><div id="asset-library-root"></div><div id="modal-root"></div><div id="alert-root"></div></div><script id="__NEXT_DATA__" type="application/json">{"props":{"pageProps":{"path":"full-stack-java-with-react-spring-boot-and-jhipster","lastUpdatedBy":"robertino.calcaterra@auth0.com","layout":"post","title":"Full Stack Java with React, Spring Boot, and JHipster","description":"This tutorial shows you how to create a slick-looking, full-stack, secure application using React, Spring Boot, and JHipster.","metaTitle":"Full Stack Java with React, Spring Boot, and JHipster","metaDescription":"This tutorial shows you how to create a slick-looking, full-stack, secure application using React, Spring Boot, and JHipster.","heroImage":{"url":"https://images.ctfassets.net/23aumh6u8s0i/3l9uOb30e8RqDsuGcE1Uvx/4fe4b3f05831c5502494f1c08987578a/jhispter_hero.jpg","size":{"width":1176,"height":1056}},"dateCreated":"2021-11-03T17:18","dateLastUpdated":"2022-01-27T18:20","dateLastUpdatedHomepage":"2021-11-10","category":["Developers","Tutorial","Java"],"tags":["React","Spring","JHipster"],"lang":"en","orderOfFeaturedPost":null,"communityTopicId":"72576","metaRobots":null,"designArtistLink":null,"designArtistName":null,"postContent":"If you search for \"Full Stack Java\" on the internet, you'll likely find a lot of recruiting, courses, and jobs. Being a full-stack developer can be exciting because you can create the backend and frontend of an app all by yourself. There is business logic and algorithms as well as like styling, making things look good, and securing everything. It also pays pretty well. Today, I'm going to show you how you can be a full-stack Java developer with Spring Boot, React, and JHipster.\n\n**Prerequisites:**\n\n- [Node.js 14+](https://nodejs.org/)\n- [Java 11+](https://sdkman.io)\n- [Docker Compose](https://docs.docker.com/compose/install/)\n\nIf you're on Windows, you may need to install the [Windows Subsystem for Linux](https://docs.microsoft.com/en-us/windows/wsl/about) for some commands to work.\n\nI recommend using SDKMAN to manage your OpenJDK installations. Just run `sdk install java 11.0.2-open` to install Java 11 and `sdk install java 17-open` for Java 17.\n\nThis tutorial won't provide the nitty-gritty details on how to write code in Java, React, or Spring Boot. That's because JHipster will write most of the code for you! However, if you're brand new to programming with these technologies, I recommend the following resources:\n\n* [Oracle's Learn Java Tutorials](https://dev.java/learn/)\n* [Spring Guides](https://spring.io/guides)\n* [Tutorial: Intro to React](https://reactjs.org/tutorial/tutorial.html)\n\nYou can skip around between sections of this tutorial using the table of contents below. \n\nYou can also clone [the completed example](https://github.com/oktadev/auth0-full-stack-java-example) and follow along that way.\n\n```\ngit clone https://github.com/oktadev/auth0-full-stack-java-example\n```\n\nIf you're more of a visual learner, you can watch the screencast below from the [OktaDev YouTube channel](https://youtu.be/PECnQs5bVbQ).\n\n\u003cAmpContent\u003e\n\u003camp-youtube\n    data-videoid=\"PECnQs5bVbQ\"\n    layout=\"responsive\"\n    width=\"480\" height=\"270\"\u003e\n\u003c/amp-youtube\u003e\n\u003c/AmpContent\u003e\n\n\u003cNonAmpContent\u003e\n\u003cdiv class='embed-container' style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden; max-width: 100%;margin-bottom:40px;\"\u003e\u003ciframe style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%;\" src='https://www.youtube.com/embed/PECnQs5bVbQ' frameborder='0' allowfullscreen\u003e\u003c/iframe\u003e\u003c/div\u003e\n\u003c/NonAmpContent\u003e\n\n## Full Stack Development with React and Spring Boot\n\nOne of the easiest ways to get started with React is by using [Create React App](https://create-react-app.dev/) (CRA). You install it locally, then run `create-react-app \u003cproject\u003e` to generate a React application with minimal dependencies. It uses webpack under-the-covers to build the project, launch a web server, and run its tests.\n\nSpring Boot has a similar tool called [Spring Initializr](https://start.spring.io/). Spring Initializer is a bit different than CRA because it's a website (and API) that you can create applications with.\n\nToday, I'll show you how to build a Flickr clone with React and Spring Boot. However, I'm going to cheat. Rather than building everything using the aforementioned tools, I'm going to use JHipster. JHipster is an application generator that initially only supported Angular and Spring Boot. Now it supports Angular, React, and Vue for the frontend. JHipster also has support for [Kotlin, Micronaut, Quarkus, .NET, and Node.js](https://www.jhipster.tech/modules/official-blueprints/) on the backend.\n\nIn this tutorial, we'll use React since it seems to be [the most popular](https://trends.google.com/trends/explore?q=angular,react,vuejs) frontend framework nowadays. \n\n## Get Started with JHipster 7\n\nIf you haven't heard of [JHipster](https://www.jhipster.tech), boy do I have a treat for you! JHipster started as a Yeoman application generator back in 2013 and has grown to become a development platform. It allows you to quickly generate, develop, and deploy modern web apps and microservice architectures. Today, I'll show you how to build a Flickr clone with JHipster and lock it down with OAuth and OpenID Connect (OIDC).\n\nTo get started with JHipster, you'll need a fast internet connection and Node.js installed. The project recommends you use the latest LTS (Long Term Support) version, which is 14.7.6 at the time of this writing. To run the app, you'll need to have Java 11 installed. If you have Git installed, JHipster will auto-commit your project after creating it. This will allow you to upgrade between versions.\n\nRun the following command to install JHipster:\n\n```shell\nnpm i -g generator-jhipster@7\n```\n\nTo create a full-stack app with JHipster, create a directory, and run `jhipster` in it:\n\n```shell\nmkdir full-stack-java\ncd full-stack-java\njhipster\n```\n\nJHipster will prompt you for the type of application to create and what technologies you'd like to include. For this tutorial, make the following choices:\n\n| Question | Answer |\n|---|---|\n| Type of application? | `Monolithic application` |\n| Name? | `flickr2` |\n| Spring WebFlux? | `No` |\n| Java package name? | `com.auth0.flickr2`  |\n| Type of authentication? | `OAuth 2.0 / OIDC` |\n| Type of database? | `SQL` |\n| Production database? | `PostgreSQL` |\n| Development database? | `H2 with disk-based persistence` |\n| Which cache? | `Ehcache` |\n| Use Hibernate 2nd level cache? | `Yes` |\n| Maven or Gradle? | `Maven` |\n| Use the JHipster Registry? | `No` |\n| Other technologies? | `\u003cblank\u003e` |\n| Client framework? | `React` |\n| Admin UI? | `Yes` |\n| Bootswatch theme? | `United` \u003e `Dark` |\n| Enable i18n? | `Yes` |\n| Native language of application? | `English` |\n| Additional languages? | Your choice! |\n| Additional testing frameworks? | `Cypress` |\n| Install other generators? | `No` |\n\n\u003cbr \\\u003e\nPress **Enter**, and JHipster will create your app in the current directory and run `npm install` to install all the dependencies specified in `package.json`.\n\n### Verify Everything Works with Cypress and Keycloak\n\nWhen you choose OAuth 2.0 and OIDC for authentication, the users are stored outside of the application rather than in it. You need to configure an identity provider (IdP) to store your users and allow your app to retrieve information about them. By default, JHipster ships with a Keycloak file for Docker Compose. A default set of users and groups is imported at startup, and it has a client registered for your JHipster app.\n\nHere's what the `keycloak.yml` looks like in your app's `src/main/docker` directory:\n\n```yaml\n# This configuration is intended for development purpose; it's **your** responsibility\n# to harden it for production\nversion: '3.8'\nservices:\n  keycloak:\n    image: jboss/keycloak:15.0.2\n    command:\n      [\n          '-b',\n          '0.0.0.0',\n          '-Dkeycloak.migration.action=import',\n          '-Dkeycloak.migration.provider=dir',\n          '-Dkeycloak.migration.dir=/opt/jboss/keycloak/realm-config',\n          '-Dkeycloak.migration.strategy=OVERWRITE_EXISTING',\n          '-Djboss.socket.binding.port-offset=1000',\n          '-Dkeycloak.profile.feature.upload_scripts=enabled',\n      ]\n    volumes:\n      - ./realm-config:/opt/jboss/keycloak/realm-config\n    environment:\n      - KEYCLOAK_USER=admin\n      - KEYCLOAK_PASSWORD=admin\n      - DB_VENDOR=h2\n    # If you want to expose these ports outside your dev PC,\n    # remove the \"127.0.0.1:\" prefix\n    ports:\n      - 127.0.0.1:9080:9080\n      - 127.0.0.1:9443:9443\n      - 127.0.0.1:10990:10990\n```\n\nStart Keycloak with the following command in your project's root directory.\n\n```shell\ndocker-compose -f src/main/docker/keycloak.yml up -d\n```\n\nYou can verify everything works by starting your app with Maven:\n\n```shell\n./mvnw\n```\n\nOpen another terminal to run your new app's Cypress tests:\n\n```shell\nnpm run e2e\n```\n\nYou should see output like the following:\n\n```shell\n  (Run Finished)\n\n       Spec                                              Tests  Passing  Failing  Pending  Skipped\n  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐\n  │ ✔  administration/administration.spec.      00:12        5        5        -        -        - │\n  │    ts                                                                                          │\n  └────────────────────────────────────────────────────────────────────────────────────────────────┘\n    ✔  All specs passed!                        00:12        5        5        -        -        -\n```\n\n## Change Your Identity Provider to Auth0\n\nJHipster uses Spring Security's OAuth 2.0 and OIDC support to configure which IdP it uses. When using Spring Security with Spring Boot, you can configure most settings in a properties file. You can even override properties with environment variables.\n\nTo switch from Keycloak to Auth0, you only need to override the default properties (for Spring Security OAuth). You don't even need to write any code!\n\nTo see how it works, create a `.auth0.env` file in the root of your project, and fill it with the code below to override the default OIDC settings:\n\n```shell\nexport SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_OIDC_ISSUER_URI=https://\u003cyour-auth0-domain\u003e/\nexport SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_ID=\u003cyour-client-id\u003e\nexport SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_SECRET=\u003cyour-client-secret\u003e\nexport JHIPSTER_SECURITY_OAUTH2_AUDIENCE=https://\u003cyour-auth0-domain\u003e/api/v2/\n```\n\n⚠️ **WARNING:** Modify your existing `.gitignore` file to have `*.env` so you don't accidentally check in your secrets!\n\nYou'll need to create a new web application in Auth0 and fill in the `\u003c...\u003e` placeholders before this works. \n\n### Create an OpenID Connect App on Auth0\n\nLog in to your Auth0 account (or [sign up](https://auth0.com/signup) if you don't have an account). You should have a unique domain like `dev-xxx.eu.auth0.com`. \n\nPress the **Create Application** button in [Applications section](https://manage.auth0.com/#/applications). Use a name like `JHipster Baby!`, select `Regular Web Applications`, and click **Create**.\n\nSwitch to the **Settings** tab and configure your application settings:\n\n- Allowed Callback URLs: `http://localhost:8080/login/oauth2/code/oidc`\n- Allowed Logout URLs: `http://localhost:8080/`\n\nScroll to the bottom and click **Save Changes**.\n\nIn the [roles](https://manage.auth0.com/#/roles) section, create new roles named `ROLE_ADMIN` and `ROLE_USER`.\n\nCreate a new user account in the [users](https://manage.auth0.com/#/users) section. Click on the **Role** tab to assign the roles you just created to the new account. \n\n_Make sure your new user's email is verified before attempting to log in!_\n\nNext, head to **Auth Pipeline** \u003e **Rules** \u003e **Create**. Select the `Empty rule` template. Provide a meaningful name like `Group claims` and replace the Script content with the following.\n\n```js\nfunction(user, context, callback) {\n  user.preferred_username = user.email;\n  const roles = (context.authorization || {}).roles;\n\n  function prepareCustomClaimKey(claim) {\n    return `https://www.jhipster.tech/${claim}`;\n  }\n\n  const rolesClaim = prepareCustomClaimKey('roles');\n\n  if (context.idToken) {\n    context.idToken[rolesClaim] = roles;\n  }\n\n  if (context.accessToken) {\n    context.accessToken[rolesClaim] = roles;\n  }\n\n  callback(null, user, context);\n}\n```\n\nThis code is adding the user's roles to a custom claim (prefixed with `https://www.jhipster.tech/roles`). This claim is mapped to Spring Security authorities in `SecurityUtils.java`.\n\n```java\npublic static List\u003cGrantedAuthority\u003e extractAuthorityFromClaims(Map\u003cString, Object\u003e claims) {\n    return mapRolesToGrantedAuthorities(getRolesFromClaims(claims));\n}\n\n@SuppressWarnings(\"unchecked\")\nprivate static Collection\u003cString\u003e getRolesFromClaims(Map\u003cString, Object\u003e claims) {\n    return (Collection\u003cString\u003e) claims.getOrDefault(\n        \"groups\",\n        claims.getOrDefault(\"roles\", claims.getOrDefault(CLAIMS_NAMESPACE + \"roles\", new ArrayList\u003c\u003e()))\n    );\n}\n\nprivate static List\u003cGrantedAuthority\u003e mapRolesToGrantedAuthorities(Collection\u003cString\u003e roles) {\n    return roles.stream().filter(role -\u003e role.startsWith(\"ROLE_\")).map(SimpleGrantedAuthority::new).collect(Collectors.toList());\n}\n```\n\nThe `SecurityConfiguration.java` class has a bean that calls this method to configure a user's roles from their OIDC data.\n\n```java\n@Bean\npublic GrantedAuthoritiesMapper userAuthoritiesMapper() {\n    return authorities -\u003e {\n        Set\u003cGrantedAuthority\u003e mappedAuthorities = new HashSet\u003c\u003e();\n\n        authorities.forEach(authority -\u003e {\n            // Check for OidcUserAuthority because Spring Security 5.2 returns\n            // each scope as a GrantedAuthority, which we don't care about.\n            if (authority instanceof OidcUserAuthority) {\n                OidcUserAuthority oidcUserAuthority = (OidcUserAuthority) authority;\n                mappedAuthorities.addAll(SecurityUtils.extractAuthorityFromClaims(oidcUserAuthority.getUserInfo().getClaims()));\n            }\n        });\n        return mappedAuthorities;\n    };\n}\n```\n\nClick **Save changes** to continue.\n\nℹ️ **NOTE**: Want to have all these steps automated for you? Vote for [this issue](https://github.com/auth0/auth0-cli/issues/351) in the Auth0 CLI project.\n\n### Run Your JHipster App with Auth0\n\nStop your JHipster app using **Ctrl+C**, set your Auth0 properties in `.auth0.env`, and start your app again.\n\n```shell\nsource .auth0.env\n./mvnw\n```\n\n_Voilà_ - your full-stack app is now using Auth0! Open your favorite browser to `http://localhost:8080`. \n\n![JHipster default homepage](https://images.ctfassets.net/23aumh6u8s0i/1Zma6iIU9n6P4CguG8CcQh/e7faa31be47593107329d0128d947b0a/04_jhipster-homepage.png)\n\nYou should see your app's homepage with a link to sign in. Click **sign in**, and you'll be redirected to Auth0 to log in.\n\n![Auth0 Login](https://images.ctfassets.net/23aumh6u8s0i/M4rpafdRgJwaqkvm7gaZl/578bd56bd6c85bbdc180aeb7537d3a63/02_auth0-login.png)\n\nAfter entering your credentials, you'll be redirected back to your app. \n\n![Authenticated](https://images.ctfassets.net/23aumh6u8s0i/7CBL7VFB4PSkcazRLSIyEG/6da5d9f23d170ba3c9b1e5c492220af7/05_jhipster-logged-in.png)\n\n## Test Your Full Stack Java App with Cypress\n\nJHipster has Auth0 support built-in, so you can specify your credentials for Cypress tests and automate your UI testing!\n\nTo do this, open a new terminal window, specify the credentials for the Auth0 user you just created, and run `npm run e2e`.\n\n```shell\nexport CYPRESS_E2E_USERNAME=\u003cnew-username\u003e\nexport CYPRESS_E2E_PASSWORD=\u003cnew-password\u003e\nnpm run e2e\n```\n\n**TIP:** If you want to use a `.env` file for your environment variables, you can use [cypress-dotenv](https://www.npmjs.com/package/cypress-dotenv). You can also put these values in `cypress.json`, but since this file will be in source control, it's a bad practice to put your secrets in it.\n\nEverything should pass in around a minute.\n\n```shell\n       Spec                                              Tests  Passing  Failing  Pending  Skipped\n  ┌────────────────────────────────────────────────────────────────────────────────────────────────┐\n  │ ✔  administration/administration.spec.      00:31        5        5        -        -        - │\n  │    ts                                                                                          │\n  └────────────────────────────────────────────────────────────────────────────────────────────────┘\n    ✔  All specs passed!                        00:31        5        5        -        -        -\n\nExecution time: 44 s.\n```\n\nShut down the process running your JHipster app - it's time to create some data handling for your Flickr clone!\n\n## Create Entities to allow CRUD on Photos\n\nI've talked a lot about how to secure your application, but we haven't done anything with photos! JHipster has a JDL (JHipster Domain Language) feature that allows you to model the data in your app and generate entities from it. You can use the [JDL Studio](https://start.jhipster.tech/jdl-studio/) to do this online and save it locally once you've finished.\n\nMy data model for this app has `Album`, `Photo`, and `Tag` entities and sets up relationships between them. Below is a screenshot of what it looks like in JDL Studio.\n\n![JDL Studio](https://images.ctfassets.net/23aumh6u8s0i/73z2OABdygvcVuMzVCzjIP/7d9a84eb719ecac66290b367ecaa3682/03_jdl-studio.png)\n\nCopy the JDL below and save it in a `flickr2.jdl` file in the root directory of your project.\n\n```\nentity Album {\n  title String required\n  description TextBlob\n  created Instant\n}\n\nentity Photo {\n  title String required\n  description TextBlob\n  image ImageBlob required\n  height Integer\n  width Integer\n  taken Instant\n  uploaded Instant\n}\n\nentity Tag {\n  name String required minlength(2)\n}\n\nrelationship ManyToOne {\n  Album{user(login)} to User\n  Photo{album(title)} to Album\n}\n\nrelationship ManyToMany {\n  Photo{tag(name)} to Tag{photo}\n}\n\npaginate Album with pagination\npaginate Photo, Tag with infinite-scroll\n```\n\nYou can generate entities and [CRUD](https://en.wikipedia.org/wiki/Create,_read,_update_and_delete) code (Java for Spring Boot; TypeScript and JSX for React) by using the following command:\n\n```shell\njhipster jdl flickr2.jdl\n```\n\nWhen prompted, type `a` to allow overwriting of existing files.\n\nThis process will create Liquibase changelog files (to create your database tables), entities, repositories, Spring MVC controllers, and all the React code necessary to create, read, update, and delete your entities. It'll even generate JUnit unit tests, Jest unit tests, and Cypress end-to-end tests!\n\nAfter the process completes, you can restart your app, log in, and browse through the **Entities** menu. Try adding some data to confirm everything works.\n\nBy now, you can see that JHipster is pretty powerful. It recognized that you had an image property of `ImageBlob` type and created the logic necessary to upload and store images in your database! _Booyah!_\n\n## Add Image EXIF Processing in Your Spring Boot API\n\nThe `Photo` entity has a few properties that can be calculated by reading the uploaded photo's [EXIF](https://yourphotoadvisor.com/understanding-exif-data-what-it-is-and-what-to-do-with-it/) (Exchangeable Image File Format) data. You might ask, how do you do that in Java?\n\nThankfully, Drew Noakes created a [metadata-extractor](https://github.com/drewnoakes/metadata-extractor) library to do just that. Add a dependency on Drew's library to your `pom.xml`:\n\n```xml\n\u003cdependency\u003e\n    \u003cgroupId\u003ecom.drewnoakes\u003c/groupId\u003e\n    \u003cartifactId\u003emetadata-extractor\u003c/artifactId\u003e\n    \u003cversion\u003e2.16.0\u003c/version\u003e\n\u003c/dependency\u003e\n```\n\nThen modify the `PhotoResource#createPhoto()` method to set the metadata when an image is uploaded.\n\n```java\nimport com.drew.imaging.ImageMetadataReader;\nimport com.drew.imaging.ImageProcessingException;\nimport com.drew.metadata.Metadata;\nimport com.drew.metadata.MetadataException;\nimport com.drew.metadata.exif.ExifSubIFDDirectory;\nimport com.drew.metadata.jpeg.JpegDirectory;\n\nimport javax.xml.bind.DatatypeConverter;\nimport java.io.BufferedInputStream;\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\n\nimport java.time.Instant;\nimport java.util.Date;\n\npublic class PhotoResource {\n    ...\n\n    public ResponseEntity\u003cPhoto\u003e createPhoto(@Valid @RequestBody Photo photo) throws Exception {\n        log.debug(\"REST request to save Photo : {}\", photo);\n        if (photo.getId() != null) {\n            throw new BadRequestAlertException(\"A new photo cannot already have an ID\", ENTITY_NAME, \"idexists\");\n        }\n\n        try {\n            photo = setMetadata(photo);\n        } catch (ImageProcessingException ipe) {\n            log.error(ipe.getMessage());\n        }\n\n        Photo result = photoRepository.save(photo);\n        return ResponseEntity\n            .created(new URI(\"/api/photos/\" + result.getId()))\n            .headers(HeaderUtil.createEntityCreationAlert(applicationName, true, ENTITY_NAME, result.getId().toString()))\n            .body(result);\n    }\n\n    private Photo setMetadata(Photo photo) throws ImageProcessingException, IOException, MetadataException {\n        String str = DatatypeConverter.printBase64Binary(photo.getImage());\n        byte[] data2 = DatatypeConverter.parseBase64Binary(str);\n        InputStream inputStream = new ByteArrayInputStream(data2);\n        BufferedInputStream bis = new BufferedInputStream(inputStream);\n        Metadata metadata = ImageMetadataReader.readMetadata(bis);\n        ExifSubIFDDirectory directory = metadata.getFirstDirectoryOfType(ExifSubIFDDirectory.class);\n\n        if (directory != null) {\n            Date date = directory.getDateDigitized();\n            if (date != null) {\n                photo.setTaken(date.toInstant());\n            }\n        }\n\n        if (photo.getTaken() == null) {\n            log.debug(\"Photo EXIF date digitized not available, setting taken on date to now...\");\n            photo.setTaken(Instant.now());\n        }\n\n        photo.setUploaded(Instant.now());\n\n        JpegDirectory jpgDirectory = metadata.getFirstDirectoryOfType(JpegDirectory.class);\n        if (jpgDirectory != null) {\n            photo.setHeight(jpgDirectory.getImageHeight());\n            photo.setWidth(jpgDirectory.getImageWidth());\n        }\n\n        return photo;\n    }\n    ...\n}\n```\n\nSince you're extracting the information, you can remove the fields from the UI and tests so the user cannot set these values.\n\nIn `src/main/webapp/app/entities/photo/photo-update.tsx`, hide the metadata so users can't edit it. Rather than displaying the `height`, `width`, `taken`, and `uploaded` values, hide them. You can do this by searching for `photo-height`, grabbing the elements (and its following three elements), and adding them to a `metadata` constant just after `defaultValues()` lambda function.\n\n```tsx\nconst defaultValues = () =\u003e\n  ...\n\nconst metadata = (\n  \u003cdiv\u003e\n    \u003cValidatedField label={translate('flickr2App.photo.height')} id=\"photo-height\" name=\"height\" data-cy=\"height\" type=\"text\" /\u003e\n    \u003cValidatedField label={translate('flickr2App.photo.width')} id=\"photo-width\" name=\"width\" data-cy=\"width\" type=\"text\" /\u003e\n    \u003cValidatedField\n      label={translate('flickr2App.photo.taken')}\n      id=\"photo-taken\"\n      name=\"taken\"\n      data-cy=\"taken\"\n      type=\"datetime-local\"\n      placeholder=\"YYYY-MM-DD HH:mm\"\n    /\u003e\n    \u003cValidatedField\n      label={translate('flickr2App.photo.uploaded')}\n      id=\"photo-uploaded\"\n      name=\"uploaded\"\n      data-cy=\"uploaded\"\n      type=\"datetime-local\"\n      placeholder=\"YYYY-MM-DD HH:mm\"\n    /\u003e\n  \u003c/div\u003e\n);\nconst metadataRows = isNew ? '' : metadata;\n\nreturn ( ... );\n```\n\nThen, in the `return` block, remove the JSX between the `image` property and `album` property and replace it with `{metadataRows}`.\n\n\n```tsx\n\u003cValidatedBlobField\n  label={translate('flickr2App.photo.image')}\n  id=\"photo-image\"\n  name=\"image\"\n  data-cy=\"image\"\n  isImage\n  accept=\"image/*\"\n  validate={{\n    required: { value: true, message: translate('entity.validation.required') },\n  }}\n/\u003e\n{metadataRows}\n\u003cValidatedField id=\"photo-album\" name=\"albumId\" data-cy=\"album\" label={translate('flickr2App.photo.album')} type=\"select\"\u003e\n  \u003coption value=\"\" key=\"0\" /\u003e\n  {albums\n    ? albums.map(otherEntity =\u003e (\n      \u003coption value={otherEntity.id} key={otherEntity.id}\u003e\n        {otherEntity.title}\n      \u003c/option\u003e\n    ))\n    : null}\n\u003c/ValidatedField\u003e\n```\n\n\nIn `src/test/javascript/cypress/integration/entity/photo.spec.ts`, remove the code that sets the data in these fields:\n\n```ts\ncy.get(`[data-cy=\"height\"]`).type('99459').should('have.value', '99459');\ncy.get(`[data-cy=\"width\"]`).type('61514').should('have.value', '61514');\ncy.get(`[data-cy=\"taken\"]`).type('2021-10-11T16:46').should('have.value', '2021-10-11T16:46');\ncy.get(`[data-cy=\"uploaded\"]`).type('2021-10-11T15:23').should('have.value', '2021-10-11T15:23'););\n```\n\nStop your Maven process, run `source .auth0.env`, then `./mvnw` again. Open a new terminal window, set your Auth0 credentials, and run `npm run e2e` to make sure everything still works. \n\n```shell\nexport CYPRESS_E2E_USERNAME=\u003cauth0-username\u003e\nexport CYPRESS_E2E_PASSWORD=\u003cauth0-password\u003e\nnpm run e2e\n```\n\nℹ️ **NOTE**: If you experience authentication errors in your Cypress tests, it's likely because you've violated Auth0's [Rate Limit Policy](https://auth0.com/docs/support/policies/rate-limit-policy). As a workaround, I recommend you use Keycloak for Cypress tests. You can do this by opening a new terminal window and starting your app there using `./mvnw`. Then, open a second terminal window and run `npm run e2e`.  \n\nIf you upload an image you took with your smartphone, the height, width, and taken values should all be populated. If they're not, chances are your image doesn't have the data in it.\n\n\u003e Need some sample photos with EXIF data? You can download pictures of my 1966 VW Bus from [an album on Flickr](https://www.flickr.com/photos/mraible/albums/72157689027458320).\n\n## Add a React Photo Gallery\n\nYou've added metadata extraction to your backend, but your photos still display in a list rather than in a grid (like Flickr). To fix that, you can use the [React Photo Gallery](https://github.com/neptunian/react-photo-gallery) component. Install it using npm:\n\n```bash\nnpm i react-photo-gallery@8 --force\n```\n\nIn `src/main/webapp/app/entities/photo/photo.tsx`, add an import for `Gallery`:\n\n```ts\nimport Gallery from 'react-photo-gallery';\n```\n\nThen add the following just after `const { match } = props;`. This adds the photos to a set with source, height, and width information.\n\n```ts\nconst photoSet = photoList.map(photo =\u003e ({\n  src: `data:${photo.imageContentType};base64,${photo.image}`,\n  width: photo.height \u003e photo.width ? 3 : photo.height === photo.width ? 1 : 4,\n  height: photo.height \u003e photo.width ? 4 : photo.height === photo.width ? 1 : 3\n}));\n```\n\nNext, add a `\u003cGallery\u003e` component right after the closing `\u003c/h2\u003e`.\n\n```tsx\nreturn (\n  \u003cdiv\u003e\n    \u003ch2 id=\"photo-heading\" data-cy=\"PhotoHeading\"\u003e\n      ...\n    \u003c/h2\u003e\n    \u003cGallery photos={photoSet} /\u003e\n    ...\n);\n```\n\nSave all your changes and restart your app.\n\n```shell\nsource .auth0.env\n./mvnw\n```\n\nLog in and navigate to **Entities** \u003e **Photo** in the top nav bar. You will see a plethora of photos loaded by [Liquibase](https://www.liquibase.org/) and [faker.js](https://marak.github.io/faker.js/). To make a clean screenshot without this data, I modified `src/main/resources/config/application-dev.yml` to remove the \"faker\" context for Liquibase.\n\n```yaml\nliquibase:\n  # Append ', faker' to the line below if you want sample data to be loaded automatically\n  contexts: dev\n```\n\nStop your Spring Boot backend and run `rm -r target/h2db` to clear out your database (or just delete the `target/h2db` directory). Restart your backend.\n\nNow you should be able to upload photos and see the results in a nice grid at the top of the list.\n\n![Gallery with Photos](https://images.ctfassets.net/23aumh6u8s0i/6RIASq72N4JN9b3ya5UVra/c0530addbbf28020d1a42f6b18ea0bae/08_photo-gallery.jpg)\n\nYou can also add a \"lightbox\" feature to the grid so you can click on photos and zoom in. The [React Photo Gallery docs](https://neptunian.github.io/react-photo-gallery/) shows how to do this. I've integrated it into the example for this post, but I won't show the code here for the sake of brevity. You can see the [final `photo.tsx` with Lightbox added on GitHub](https://github.com/oktadev/auth0-full-stack-java-example/blob/main/src/main/webapp/app/entities/photo/photo.tsx) or a [diff of the necessary changes](https://github.com/oktadev/auth0-full-stack-java-example/commit/76dcf711816cb2f3455ba4b46264bf48002487f7).\n\n## Make Your Full Stack Java App Into a PWA\n\nProgressive Web Apps, aka PWAs, are the best way for developers to make their webapps load faster and more performant. In a nutshell, PWAs are websites that use recent web standards to allow for installation on a user's computer or device and deliver an app-like experience to those users. To make a web app into a PWA:\n\n1. Your app must be served over HTTPS\n2. Your app must register a service worker so it can cache requests and work offline\n3. Your app must have a webapp manifest with installation information and icons\n\nFor HTTPS, you can [set up a certificate for localhost](https://letsencrypt.org/docs/certificates-for-localhost/) or (even better), deploy it to production! Cloud providers like Heroku will provide you with HTTPS out-of-the-box, but they won't _force_ HTTPS. To force HTTPS, open `src/main/java/com/auth0/flickr2/config/SecurityConfiguration.java` and add a rule to force a secure channel when an `X-Forwarded-Proto` header is sent.\n\n```java\n@Override\nprotected void configure(HttpSecurity http) throws Exception {\n    http\n        ...\n    .and()\n        .frameOptions()\n        .deny()\n    .and()\n        .requiresChannel()\n        .requestMatchers(r -\u003e r.getHeader(\"X-Forwarded-Proto\") != null)\n        .requiresSecure()\n    .and()\n        .authorizeRequests()\n        ...\n}\n```\n\nThe [workbox-webpack-plugin](https://developers.google.com/web/tools/workbox/modules/workbox-webpack-plugin) is configured already for generating a service worker, but it only works when running your app with a production profile. This is nice because it means your data isn't cached in the browser when you're developing.\n\nTo register a service worker, open `src/main/webapp/index.html` and uncomment the following block of code.\n\n```html\n\u003cscript\u003e\n  if ('serviceWorker' in navigator) {\n    window.addEventListener('load', function () {\n      navigator.serviceWorker.register('/service-worker.js').then(function () {\n        console.log('Service Worker Registered');\n      });\n    });\n  }\n\u003c/script\u003e\n```\n\nThe final feature \u0026mdash; a webapp manifest \u0026mdash; is included at `src/main/webapp/manifest.webapp`. It defines an app name, colors, and icons. You might want to adjust these to fit your app.\n\n## Deploy Your React + Spring Boot App to Heroku\n\nTo deploy your app to Heroku, you'll first need to install the [Heroku CLI](https://devcenter.heroku.com/articles/heroku-cli). You can confirm it's installed by running `heroku --version`.\n\n\u003e If you don't have a Heroku account, go to [heroku.com](https://www.heroku.com/) and sign up. Don't worry, it's free, and chances are you'll love the experience.\n\nRun `heroku login` to log in to your account, then start the deployment process with JHipster:\n\n```\njhipster heroku\n```\n\nThis will start the [Heroku sub-generator](https://www.jhipster.tech/heroku/) that asks you a couple of questions about your app: what you want to name it and whether you want to deploy it to a US region or EU. Then it'll prompt you to choose between building locally or with Git on Heroku's servers. Choose Git, so you don't have to upload a fat JAR. When prompted to use Okta for OIDC, select `No`. Then, the deployment process will begin.\n\nYou'll be prompted to overwrite `pom.xml`—type `a` to allow overwriting all files.\n\nIf you have a stable and fast internet connection, your app should be live on the internet in around six minutes!\n\n```\nremote: -----\u003e Compressing...\nremote:        Done: 120.9M\nremote: -----\u003e Launching...\nremote:        Released v7\nremote:        https://flickr-2.herokuapp.com/ deployed to Heroku\nremote:\nremote: Verifying deploy... done.\n\nTo https://git.heroku.com/flickr-2.git\n * [new branch]      HEAD -\u003e main\n\nYour app should now be live. To view it, run\n\theroku open\nAnd you can view the logs with this command\n\theroku logs --tail\nAfter application modification, redeploy it with\n\tjhipster heroku\nCongratulations, JHipster execution, is complete!\nSponsored with ❤️ by @oktadev.\nExecution time: 6 min. 19 s.\n```\n\n### Configure for Auth0 and Analyze Your PWA Score with Lighthouse\n\nTo configure your app to work with Auth0 on Heroku, run the following command to set your Auth0 variables on Heroku.\n\n```bash\nheroku config:set \\\n  SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_OIDC_ISSUER_URI=\"https://\u003cyour-auth0-domain\u003e/\" \\\n  SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_ID=\"\u003cyour-client-id\u003e\" \\\n  SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_SECRET=\"\u003cyour-client-secret\u003e\" \\\n  JHIPSTER_SECURITY_OAUTH2_AUDIENCE=\"https://\u003cyour-auth0-domain\u003e/api/v2/\"\n```\n\nThen, log in to your Auth0 account, navigate to your app, and add your Heroku URLs as valid redirect URIs:\n\n- Allowed Callback URLs: `https://flickr-2.herokuapp.com/login/oauth2/code/oidc`\n- Allowed Logout URLs: `https://flickr-2.herokuapp.com`\n\nAfter Heroku restarts your app, open it with `heroku open` and log in.\n\n![Running on Heroku!](https://images.ctfassets.net/23aumh6u8s0i/3MDBfwDhZiuKW8uzrlm291/2c574c89ca11c7b853bf01d850f06ee9/09_app-on-heroku.png)\n\nThen, test it with [Lighthouse](https://developers.google.com/web/tools/lighthouse/) (using the Lighthouse tab in Chrome developer tools). Looks pretty good, eh?! 💯\n\n![Lighthouse Score 💯](https://images.ctfassets.net/23aumh6u8s0i/2udHZaYwD4vfVtTf9SrpzB/c6888183a1364142f5edca732a0ad02c/06_lighthouse-score.png)\n\nIt's pretty darn secure too, at least according to [securityheaders.com](https://securityheaders.com).\n\n![Security Headers on Heroku](https://images.ctfassets.net/23aumh6u8s0i/Y1O0MLjbMSojaSH1UOnuN/48d36a1abdb9007c0dfa2a45bd61057e/09_security-headers.png)\n\n## Learn More About Full Stack Java Development\n\nThis tutorial shows you how to streamline full-stack Java development with JHipster. You developed a working application with a React frontend and a Spring Boot backend. You can find the app created in this tutorial on GitHub, in the [auth0-full-stack-java-example](https://github.com/oktadev/auth0-full-stack-java-example) repository.\n\nYou might also enjoy these related blog posts:\n\n- [Learning Java as a First Language](/blog/2018/12/11/learning-java-first-language)\n- [Reactive Java Microservices with Spring Boot and JHipster](/blog/2021/01/20/reactive-java-microservices)\n- [Build and Secure an API with Spring Boot and Kotlin](https://auth0.com/blog/build-and-secure-an-api-with-spring-boot/)\n- [The Complete Guide to React User Authentication with Auth0](https://auth0.com/blog/complete-guide-to-react-user-authentication/)\n\nTo see when we publish more developer topics on Auth0 and the Okta developer blog, follow [Auth0](https://twitter.com/auth0) and [OktaDev](https://twitter.com/oktadev) on Twitter.","tutorialChapterTitle":null,"redirectTo":null,"reportingAuthorType":"Guest Author","reportingPostType":"Technical","reportingIsAuth0cta":false,"authors":[{"path":"matt-raible","name":"Matt Raible","avatar":{"url":"https://images.ctfassets.net/23aumh6u8s0i/1ciaQDb4CM5f7DxRX8gqUG/9d23ca769683d021a01d4702a2e4ffad/matt-raible.jpeg","size":{"width":400,"height":400}},"lastUpdatedBy":"robertino.calcaterra@auth0.com","email":"matt.raible@okta.com","twitter":"https://twitter.com/mraible","github":"https://github.com/mraible","linkedin":"https://www.linkedin.com/in/mraible","isPopular":false,"personalWebsite":"https://raibledesigns.com/","type":"Guest Author","jobTitle":"Developer Advocate at Okta","description":"Matt Raible is a well-known figure in the Java community and has been building web applications for most of his adult life. For over 20 years, he has helped developers learn and adopt open source frameworks and use them effectively. He's a web developer, Java Champion, and Developer Advocate at Okta. Matt is a frequent contributor to open source and a big fan of Java, IntelliJ, TypeScript, Angular, and Spring Boot. "}],"relatedPosts":[{"path":"spring-boot-logs-aggregation-and-monitoring-using-elk-stack","title":"Spring Boot Logs Aggregation and Monitoring Using ELK Stack","description":"Learn how you can integrate ELK stack with your Spring Boot application for logs aggregation and monitoring in a centralized way.","heroImage":{"url":"https://images.ctfassets.net/23aumh6u8s0i/6PHOLRqEbX3rVvwUyufoeK/125762bd3ecc31d99d61b24f2a2987d8/spring-new.png","size":{"width":1176,"height":1056}},"category":["Developers","Tutorial","Spring Boot"],"layout":"post","tutorialChapterTitle":null,"lang":"en"},{"path":"get-started-with-custom-error-handling-in-spring-boot-java","title":"Get Started with Custom Error Handling in Spring Boot (Java)","description":"Learn how to implement custom error handling logic in Spring Boot. You will see two approaches based on the @ControllerAdvice annotation. Similarly, you will learn how to deal with authentication and access denied errors in Spring Security.","heroImage":{"url":"https://images.ctfassets.net/23aumh6u8s0i/1bJhaAmye3tLIINt0wUBZI/241f7a29932541ffd4a38191ba973acf/spring-new","size":{"width":1176,"height":1056}},"category":["Developers","Tutorial","Spring Boot"],"layout":"post","tutorialChapterTitle":null,"lang":"en"},{"path":"spring-cloud-messaging-with-aws-and-localstack","title":"Spring Cloud Messaging With AWS and LocalStack","description":"Learn how to simulate AWS services locally using LocalStack with a Spring Boot application.","heroImage":{"url":"https://images.ctfassets.net/23aumh6u8s0i/5NmoaVeWVd545OeCADzCfm/c3e106f00a001fa514b34f628b45616a/aws","size":{"width":1176,"height":1056}},"category":["Developers","Deep Dive","Spring"],"layout":"post","tutorialChapterTitle":null,"lang":"en"}],"mlRecommendations":["/blog/micro-frontends-for-java-microservices/","/blog/integrate-react-native-and-spring-boot-securely/"],"isFeatured":false,"isHiddenFromBlogPostGrid":false,"isInPressRelease":false,"sidebarAd":null,"isExludedFromSitemap":false,"mlRecommendationsData":[{"path":"/blog/integrate-react-native-and-spring-boot-securely/","heroImage":{"url":"https://images.ctfassets.net/23aumh6u8s0i/3l9uOb30e8RqDsuGcE1Uvx/4fe4b3f05831c5502494f1c08987578a/jhispter_hero.jpg","size":{"width":1176,"height":1056}},"title":"Integrate React Native and Spring Boot Securely","category":["Developers","Tutorial","React Native"]},{"path":"/blog/micro-frontends-for-java-microservices/","heroImage":{"url":"https://images.ctfassets.net/23aumh6u8s0i/7rET2iW6i0wbd4rhKtZv3v/053d48bc52096c6eacebe902f63c9628/microservices_hero.jpg","size":{"width":1176,"height":1056}},"title":"Micro Frontends for Java Microservices","category":["Developers","Tutorial","Java"]}],"withAB":true},"__N_SSG":true},"page":"/blog/[slug]","query":{"slug":"full-stack-java-with-react-spring-boot-and-jhipster"},"buildId":"ivq2FU8pGha9ZYzZmTlF3","assetPrefix":"/blog","isFallback":false,"gsp":true,"customServer":true,"scriptLoader":[]}</script></body></html>
